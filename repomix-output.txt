This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-03T13:42:24.307Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
components/
  ui/
    badge.tsx
data/
  credentials.json
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      credentials/
        route.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      accordion.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      dialog.tsx
      input.tsx
      label.tsx
      radio-group.tsx
      tabs.tsx
    vc-demo/
      error-injection-form.tsx
      vc-demo-system.tsx
      vc-issue-form.tsx
      vc-process-visualization.tsx
      vc-selective-disclosure.tsx
      vc-verifier-request.tsx
      vc-verifier.tsx
      vc-wallet-view.tsx
  lib/
    types/
      vc.ts
    utils/
      address.ts
    vc/
      crypto-utils.ts
      did-utils.ts
      revocation-utils.ts
      sd-jwt.ts
      security-utils.ts
      storage-utils.ts
      types.ts
      utils.ts
    utils.ts
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: components/ui/badge.tsx
================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground",
        secondary: "border-transparent bg-secondary text-secondary-foreground",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground",
        outline: "text-foreground",
        success: "bg-green-100 text-green-800 hover:bg-green-200",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

================
File: data/credentials.json
================
[
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:4682768d-5949-4d18-93cc-c873c46dbf0b",
    "type": [
      "VerifiableCredential",
      "InvalidSignatureCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-26T15:27:32.173Z",
    "validFrom": "2025-02-26T15:27:32.173Z",
    "validUntil": "2026-02-26T15:27:32.173Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "杉本",
      "dateOfBirth": "1998-02-05",
      "address": "東京都立川市柏町"
    },
    "style": {
      "backgroundColor": "from-green-500 to-green-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:4682768d-5949-4d18-93cc-c873c46dbf0b",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "0",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-26T15:27:32.173Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "invalid_signature_for_testing_purposes"
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:5c0ab851-0492-47eb-90e0-a72254bf3852",
    "type": [
      "VerifiableCredential",
      "ExpiredCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-26T15:27:47.499Z",
    "validFrom": "2024-11-18T15:27:47.499Z",
    "validUntil": "2025-02-26T15:27:47.498Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "杉本",
      "dateOfBirth": "1998-09-02",
      "address": "東京都立川市柏町"
    },
    "style": {
      "backgroundColor": "from-blue-500 to-blue-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:5c0ab851-0492-47eb-90e0-a72254bf3852",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "0",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-26T15:27:47.506Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "N+nxexAI27y4LfPRIG1hSx5qw/BWM5duhUVmMQ2M8TfePUVaw460g5KZp9F6NkLSk1pCvfxz5x8Hgk8lgxr2BA=="
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:b5fc6bfe-cf85-4a48-8ff1-367e087c7ef4",
    "type": [
      "VerifiableCredential",
      "InvalidIssuerCredential"
    ],
    "issuer": {
      "id": "did:web:invalid-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-26T15:28:00.283Z",
    "validFrom": "2025-02-26T15:28:00.283Z",
    "validUntil": "2026-02-26T15:28:00.283Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "杉本",
      "dateOfBirth": "1998-02-02",
      "address": "東京都立川市柏町"
    },
    "style": {
      "backgroundColor": "from-purple-500 to-purple-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:b5fc6bfe-cf85-4a48-8ff1-367e087c7ef4",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "0",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-26T15:28:00.292Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "ihidoFi4Nn1K68RWOc9jplZM0eydFUiqRbSyyLtGXRy18k99pU6c6AIdI3yb83z/NjVPbk1rk7YS+bMEE1SYWw=="
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:fa9ee818-c460-4bcf-b039-5285eedf75bc",
    "type": [
      "VerifiableCredential",
      "MissingFieldsCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-26T15:28:15.156Z",
    "validFrom": "2025-02-26T15:28:15.156Z",
    "validUntil": "2026-02-26T15:28:15.156Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo"
    },
    "style": {
      "backgroundColor": "from-purple-500 to-purple-600",
      "textColor": "text-white"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-26T15:28:15.167Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "Q/MHx8/HmbI4CBGOhZoN+t9HaiK4NqXL7cRRACVw41e4CMRkM2PYjLVvd2jGLit+BRs2rOGBLHUWgczmxFxjhg=="
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:6cc24227-7477-435c-afa5-c525f1a28e05",
    "type": [
      "VerifiableCredential",
      "RevokedCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-26T15:28:28.655Z",
    "validFrom": "2025-02-26T15:28:28.655Z",
    "validUntil": "2026-02-26T15:28:28.655Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "kazsugim",
      "dateOfBirth": "1232-02-02",
      "address": "東京都立川市柏町"
    },
    "style": {
      "backgroundColor": "from-red-500 to-red-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:6cc24227-7477-435c-afa5-c525f1a28e05",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "1",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-26T15:28:28.666Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "F1xhFqMPpH9xiMz1LTzfqqnwVwPIPEGVdXZl8oy2k+WKGYd+cPYTeSepBWpvP0bzjfWiy+mfFo52c2eDDNDYMw=="
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:e39ec5b2-5940-4032-8a58-fd4574cd6cd3",
    "type": [
      "VerifiableCredential",
      "PersonalInfoCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-27T22:44:25.414Z",
    "validFrom": "2025-02-27T22:44:25.414Z",
    "validUntil": "2026-02-27T22:44:25.414Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "杉本",
      "dateOfBirth": "1998-09-22",
      "address": "東京都立川市柏町"
    },
    "style": {
      "backgroundColor": "from-purple-500 to-purple-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:e39ec5b2-5940-4032-8a58-fd4574cd6cd3",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "0",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-27T22:44:25.422Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "Xg57jUjTmOxYKXPtWN+amMfVpvdu3d3ZjKS8l8HkH4DEJlgt5fE6W2U7AS59tgW0pS6f3ahDI9A8St6Vp3OfYw=="
    }
  },
  {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1"
    ],
    "id": "urn:uuid:ed7deef6-1b59-4ef4-94bc-45fe1323900f",
    "type": [
      "VerifiableCredential",
      "PersonalInfoCredential"
    ],
    "issuer": {
      "id": "did:web:demo-issuer.example.com",
      "name": "Demo Issuer Organization",
      "image": "https://demo-issuer.example.com/logo.png"
    },
    "issuanceDate": "2025-02-27T23:05:31.021Z",
    "validFrom": "2025-02-27T23:05:31.021Z",
    "validUntil": "2026-02-27T23:05:31.021Z",
    "credentialSubject": {
      "id": "did:web:demo-holder.example.com",
      "type": "PersonalInfo",
      "name": "杉本",
      "dateOfBirth": "1998-02-02",
      "address": "東京都立川市柏町",
      "presentationFormat": "vp"
    },
    "style": {
      "backgroundColor": "from-green-500 to-green-600",
      "textColor": "text-white"
    },
    "credentialStatus": {
      "id": "https://demo-issuer.example.com/status/urn:uuid:ed7deef6-1b59-4ef4-94bc-45fe1323900f",
      "type": "StatusList2021Entry",
      "statusPurpose": "revocation",
      "statusListIndex": "0",
      "statusListCredential": "https://demo-issuer.example.com/status-list/2021"
    },
    "proof": {
      "type": "DataIntegrityProof",
      "created": "2025-02-27T23:05:31.030Z",
      "verificationMethod": "did:web:demo-issuer.example.com#key-1",
      "proofPurpose": "assertionMethod",
      "cryptosuite": "ecdsa-2019",
      "proofValue": "X3ejxxEVirUCsHLzyumW87EAs27Yg+3SqjG+q7xoS7VTChuzzvGtYCtGPtd0acnhw6SmhW9QSaIcQ9j7F7aY4g=="
    }
  }
]

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/credentials/route.ts
================
// src/app/api/credentials/route.ts
import { VerifiableCredential } from "@/lib/types/vc";
import { promises as fs } from "fs";
import { NextResponse } from "next/server";
import path from "path";

const dataFilePath = path.join(process.cwd(), "data", "credentials.json");

// ファイルを読み込む関数
async function readCredentialsFile(): Promise<VerifiableCredential[]> {
  try {
    const fileContents = await fs.readFile(dataFilePath, "utf8");
    return JSON.parse(fileContents);
  } catch (error) {
    // ファイルが存在しない場合は空の配列を返す
    return [];
  }
}

// ファイルに書き込む関数
async function writeCredentialsFile(
  data: VerifiableCredential[],
): Promise<void> {
  await fs.writeFile(dataFilePath, JSON.stringify(data, null, 2));
}

// GET: すべてのクレデンシャルを取得
export async function GET() {
  try {
    const credentials = await readCredentialsFile();
    return NextResponse.json(credentials);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch credentials" },
      { status: 500 },
    );
  }
}

// POST: 新しいクレデンシャルを追加
export async function POST(request: Request) {
  try {
    const credential = await request.json();
    const credentials = await readCredentialsFile();

    // IDの重複チェック
    const exists = credentials.some((c) => c.id === credential.id);
    if (exists) {
      return NextResponse.json(
        { error: "Credential with this ID already exists" },
        { status: 400 },
      );
    }

    credentials.push(credential);
    await writeCredentialsFile(credentials);

    return NextResponse.json(credential, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to save credential" },
      { status: 500 },
    );
  }
}

// DELETE: クレデンシャルを削除
export async function DELETE(request: Request) {
  try {
    const { id } = await request.json();
    const credentials = await readCredentialsFile();

    const filteredCredentials = credentials.filter((c) => c.id !== id);
    await writeCredentialsFile(filteredCredentials);

    return new NextResponse(null, { status: 204 });
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to delete credential" },
      { status: 500 },
    );
  }
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
"use client";

import VCDemoSystem from "@/components/vc-demo/vc-demo-system";

export default function Home() {
  return (
    <main className="min-h-screen py-8">
      <VCDemoSystem />
    </main>
  );
}

================
File: src/components/ui/accordion.tsx
================
"use client";

import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import * as React from "react";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = "AccordionTrigger";

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className="pb-4 pt-0">{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = "AccordionContent";

export { Accordion, AccordionContent, AccordionItem, AccordionTrigger };

================
File: src/components/ui/badge.tsx
================
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
        success:
          "border-transparent bg-green-500 text-white hover:bg-green-600",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

================
File: src/components/ui/button.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: src/components/ui/card.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};

================
File: src/components/ui/checkbox.tsx
================
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

================
File: src/components/ui/dialog.tsx
================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};

================
File: src/components/ui/input.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

================
File: src/components/ui/label.tsx
================
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: src/components/ui/radio-group.tsx
================
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: src/components/ui/tabs.tsx
================
"use client";

import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = "TabsList";

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = "TabsTrigger";

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = "TabsContent";

export { Tabs, TabsContent, TabsList, TabsTrigger };

================
File: src/components/vc-demo/error-injection-form.tsx
================
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { ErrorInjectionOptions } from "@/lib/vc/types";
import React, { useState } from "react";

export const ErrorInjectionForm: React.FC<{
  onErrorOptionsChange: (options: ErrorInjectionOptions) => void;
}> = ({ onErrorOptionsChange }) => {
  const [options, setOptions] = useState<ErrorInjectionOptions>({
    invalidSignature: false,
    expiredCredential: false,
    invalidIssuer: false,
    missingFields: false,
    revokedCredential: false,
  });

  const handleChange = (key: keyof ErrorInjectionOptions) => {
    const newOptions = {
      ...options,
      [key]: !options[key],
    };

    // 「発行者が無効」と「必須フィールド欠落」が同時に選択されないようにする
    if (
      key === "invalidIssuer" &&
      newOptions.invalidIssuer &&
      newOptions.missingFields
    ) {
      newOptions.missingFields = false;
    } else if (
      key === "missingFields" &&
      newOptions.missingFields &&
      newOptions.invalidIssuer
    ) {
      newOptions.invalidIssuer = false;
    }

    setOptions(newOptions);
    onErrorOptionsChange(newOptions);
  };

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">エラー注入オプション</h3>
      <div className="space-y-2">
        {Object.entries(options).map(([key, value]) => (
          <div key={key} className="flex items-center space-x-2">
            <Checkbox
              id={key}
              checked={value}
              onCheckedChange={() =>
                handleChange(key as keyof ErrorInjectionOptions)
              }
            />
            <Label htmlFor={key}>
              {key === "invalidSignature" && "無効な署名"}
              {key === "expiredCredential" && "有効期限切れ"}
              {key === "invalidIssuer" && "無効な発行者"}
              {key === "missingFields" && "必須フィールド欠落"}
              {key === "revokedCredential" && "失効済み"}
            </Label>
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: src/components/vc-demo/vc-demo-system.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  AuthorizationRequest,
  AuthorizationResponse,
  VerifiableCredential,
} from "@/lib/types/vc";
import {
  deleteCredential,
  getStoredCredentials,
  saveCredential,
} from "@/lib/vc/storage-utils";
import {
  createVerifiableCredential,
  generateAuthorizationRequest,
  generateAuthorizationResponse,
} from "@/lib/vc/utils";
import { QRCodeSVG } from "qrcode.react";
import { useEffect, useState } from "react";
import VCIssueForm from "./vc-issue-form";
import VCProcessVisualization from "./vc-process-visualization";
import { VerifierComponent } from "./vc-verifier";
import VCWalletView from "./vc-wallet-view";

const VCDemoSystem = () => {
  const [showWallet, setShowWallet] = useState(false);
  const [vcRequested, setVcRequested] = useState(false);
  const [currentRequest, setCurrentRequest] =
    useState<AuthorizationRequest | null>(null);
  const [issuedVC, setIssuedVC] = useState<VerifiableCredential | null>(null);
  const [holderDid, setHolderDid] = useState<string>(
    "did:web:demo-holder.example.com",
  );
  const [currentResponse, setCurrentResponse] =
    useState<AuthorizationResponse | null>(null);
  const [currentStep, setCurrentStep] = useState(0);
  const [storedCredentials, setStoredCredentials] = useState<
    VerifiableCredential[]
  >([]);
  const [activeTab, setActiveTab] = useState("issuer");
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCredential, setSelectedCredential] =
    useState<VerifiableCredential | null>(null);

  // タブ切り替え時にVCをリロード
  useEffect(() => {
    const loadCredentials = async () => {
      if (activeTab === "holder") {
        try {
          const credentials = await getStoredCredentials();
          setStoredCredentials(credentials || []);
        } catch (error) {
          console.error("Error loading credentials:", error);
        }
      }
    };
    loadCredentials();
  }, [activeTab]);

  const handleRequestVC = async () => {
    try {
      setCurrentStep(1);
      const request = await generateAuthorizationRequest(
        ["DemoCredential"],
        "デモ用のVC発行リクエスト",
      );
      setCurrentRequest(request);
      setVcRequested(true);
    } catch (error) {
      console.error("Error generating authorization request:", error);
    }
  };

  const handleAcceptVC = async (personalInfo: any) => {
    if (!currentRequest) return;
    setIsLoading(true);

    try {
      setCurrentStep(2);
      const response = await generateAuthorizationResponse(
        currentRequest.requestId,
        holderDid,
        true,
      );
      setCurrentResponse(response);

      const vc = await createVerifiableCredential(
        holderDid,
        {
          name: personalInfo.name,
          dateOfBirth: personalInfo.dateOfBirth,
          address: personalInfo.address,
          credentialType: personalInfo.credentialType,
          style: personalInfo.style,
          errorTypes: personalInfo.errorTypes,
          presentationFormat: personalInfo.presentationFormat,
        },
        personalInfo.errorOptions,
      );

      await saveCredential(vc);
      const updatedCredentials = await getStoredCredentials();
      setStoredCredentials(updatedCredentials);

      setCurrentStep(3);
      setIssuedVC(vc);
      setShowWallet(false);
    } catch (error) {
      console.error("Error accepting VC:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCredential = async (credentialId: string) => {
    try {
      setIsLoading(true);
      await deleteCredential(credentialId);
      const updatedCredentials = await getStoredCredentials();
      setStoredCredentials(updatedCredentials);
    } catch (error) {
      console.error("Error deleting credential:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const prettifyJson = (obj: any) => {
    return JSON.stringify(obj, null, 2);
  };

  return (
    <div className="container mx-auto p-4">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="issuer">発行者 (Issuer)</TabsTrigger>
          <TabsTrigger value="holder">Wallet</TabsTrigger>
          <TabsTrigger value="verifier">検証者 (Verifier)</TabsTrigger>
        </TabsList>

        <TabsContent value="issuer">
          <Card>
            <CardHeader>
              <CardTitle>Verifiable Credential発行デモ</CardTitle>
            </CardHeader>
            <CardContent>
              <VCProcessVisualization currentStep={currentStep} />

              <Button
                onClick={handleRequestVC}
                className="w-full mt-6 mb-4"
                disabled={vcRequested && !issuedVC}
              >
                VCを発行
              </Button>

              {vcRequested && !issuedVC && currentRequest && (
                <div className="flex flex-col items-center mt-6">
                  <p className="mb-4">
                    QRコードをスキャンするか、Webウォレットで開いてください
                  </p>
                  <QRCodeSVG value={prettifyJson(currentRequest)} size={200} />
                  <Button onClick={() => setShowWallet(true)} className="mt-4">
                    Webウォレットで開く
                  </Button>
                </div>
              )}

              {currentResponse && (
                <div className="mt-4">
                  <h3 className="text-lg font-semibold mb-2">
                    認証レスポンス:
                  </h3>
                  <pre className="bg-gray-100 p-4 rounded overflow-auto max-h-96">
                    {prettifyJson(currentResponse)}
                  </pre>
                </div>
              )}

              {issuedVC && (
                <div className="mt-4">
                  <h3 className="text-lg font-semibold mb-2">発行されたVC:</h3>
                  <pre className="bg-gray-100 p-4 rounded overflow-auto max-h-300">
                    {prettifyJson(issuedVC)}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="holder">
          <Card>
            <CardHeader>
              <CardTitle>保存されたVC一覧</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid w-full gap-4">
                <div className="flex flex-col space-y-1.5 mb-4">
                  <Label htmlFor="holderDid">Holder DID</Label>
                  <Input
                    id="holderDid"
                    value={holderDid}
                    onChange={(e) => setHolderDid(e.target.value)}
                  />
                </div>
                <VCWalletView
                  credentials={storedCredentials}
                  onDeleteCredential={handleDeleteCredential}
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="verifier">
          <Card>
            <CardHeader>
              <CardTitle>Verifiable Credential検証</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {storedCredentials.length === 0 ? (
                  <div className="text-center text-gray-500">
                    検証可能なクレデンシャルがありません
                  </div>
                ) : (
                  <VerifierComponent storedCredentials={storedCredentials} />
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <Dialog open={showWallet} onOpenChange={setShowWallet}>
        <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Verifiable Credential発行</DialogTitle>
          </DialogHeader>
          <div className="p-4">
            <h3 className="text-lg font-semibold mb-4">認証リクエスト</h3>
            {currentRequest && (
              <div className="space-y-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p>
                    <strong>クレデンシャルタイプ:</strong>{" "}
                    {currentRequest.credentialType.join(", ")}
                  </p>
                  <p>
                    <strong>目的:</strong> {currentRequest.purpose}
                  </p>
                  <p>
                    <strong>発行者:</strong> {currentRequest.issuer.name} (
                    {currentRequest.issuer.id})
                  </p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">リクエスト詳細</h4>
                  <div className="bg-gray-100 p-4 rounded-md">
                    <Tabs defaultValue="formatted" className="w-full">
                      <TabsList className="mb-2">
                        <TabsTrigger value="formatted">整形表示</TabsTrigger>
                        <TabsTrigger value="raw">生データ</TabsTrigger>
                      </TabsList>
                      <TabsContent
                        value="formatted"
                        className="min-h-[200px] max-h-[300px] overflow-y-auto"
                      >
                        <div className="space-y-2">
                          <div>
                            <span className="text-sm text-gray-500">
                              リクエストID:
                            </span>
                            <p className="text-sm break-all">
                              {currentRequest.requestId}
                            </p>
                          </div>
                          <div>
                            <span className="text-sm text-gray-500">
                              タイムスタンプ:
                            </span>
                            <p className="text-sm">
                              {new Date(
                                currentRequest.timestamp,
                              ).toLocaleString()}
                            </p>
                          </div>
                        </div>
                      </TabsContent>
                      <TabsContent
                        value="raw"
                        className="min-h-[200px] max-h-[300px] overflow-y-auto"
                      >
                        <pre className="text-sm whitespace-pre-wrap break-all">
                          {JSON.stringify(currentRequest, null, 2)}
                        </pre>
                      </TabsContent>
                    </Tabs>
                  </div>
                </div>
                <VCIssueForm
                  onSubmit={async (personalInfo) => {
                    await handleAcceptVC(personalInfo);
                    setShowWallet(false);
                  }}
                  onCancel={() => setShowWallet(false)}
                />
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default VCDemoSystem;

================
File: src/components/vc-demo/vc-issue-form.tsx
================
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { ErrorInjectionOptions, PersonalInfo } from "@/lib/types/vc";
import { fetchAddressFromPostalCode } from "@/lib/utils/address";
import { Loader2 } from "lucide-react";
import React, { useState } from "react";
import { ErrorInjectionForm } from "./error-injection-form";

interface VCIssueFormProps {
  onSubmit: (
    personalInfo: PersonalInfo,
    errorOptions: ErrorInjectionOptions,
  ) => void;
  onCancel: () => void;
}

const colorOptions = [
  { bg: "from-green-500 to-green-600", text: "text-white", label: "緑" },
  { bg: "from-blue-500 to-blue-600", text: "text-white", label: "青" },
  { bg: "from-purple-500 to-purple-600", text: "text-white", label: "紫" },
  { bg: "from-red-500 to-red-600", text: "text-white", label: "赤" },
];

const predefinedTypes = [
  "PersonalInfoCredential",
  "StudentCredential",
  "EmployeeCredential",
  "MembershipCredential",
  "HealthCredential",
];

const VCIssueForm: React.FC<VCIssueFormProps> = ({ onSubmit, onCancel }) => {
  const [selectedColor, setSelectedColor] = useState(colorOptions[0]);
  const [credentialType, setCredentialType] = useState(
    "PersonalInfoCredential",
  );
  const [isCustomType, setIsCustomType] = useState(false);
  const [customType, setCustomType] = useState("");
  const [personalInfo, setPersonalInfo] = React.useState<PersonalInfo>({
    name: "",
    dateOfBirth: "",
    address: "",
  });
  const [postalCode, setPostalCode] = React.useState("");
  const [isLoadingAddress, setIsLoadingAddress] = React.useState(false);
  const [errorOptions, setErrorOptions] = useState<ErrorInjectionOptions>({
    invalidSignature: false,
    expiredCredential: false,
    invalidIssuer: false,
    missingFields: false,
    revokedCredential: false,
  });

  // エラータイプの設定
  const [errorTypes, setErrorTypes] = useState({
    invalidSignature: "InvalidSignatureCredential",
    expiredCredential: "ExpiredCredential",
    invalidIssuer: "InvalidIssuerCredential",
    missingFields: "MissingFieldsCredential",
    revokedCredential: "RevokedCredential",
  });

  const [presentationFormat, setPresentationFormat] = useState<"sd-jwt" | "vp">("sd-jwt");

  const handlePostalCodeChange = async (
    e: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const value = e.target.value;
    setPostalCode(value);

    // 7桁の数字が入力されたら住所を検索
    if (value.replace(/-/g, "").match(/^\d{7}$/)) {
      setIsLoadingAddress(true);
      try {
        const address = await fetchAddressFromPostalCode(value);
        if (address) {
          setPersonalInfo((prev) => ({ ...prev, address }));
        }
      } finally {
        setIsLoadingAddress(false);
      }
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // エラーオプションに応じてタイプを変更
    let finalType = isCustomType ? customType : credentialType;

    // personalInfoオブジェクトに追加情報を含める
    const enhancedPersonalInfo = {
      ...personalInfo,
      credentialType: finalType,
      style: {
        backgroundColor: selectedColor.bg,
        textColor: selectedColor.text,
      },
      errorOptions: errorOptions,
      errorTypes: errorTypes,
      presentationFormat: presentationFormat,
    };

    onSubmit(enhancedPersonalInfo, errorOptions);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label>クレデンシャルタイプ</Label>
        <div className="flex items-center space-x-2">
          <Checkbox
            id="customType"
            checked={isCustomType}
            onCheckedChange={(checked) => setIsCustomType(checked as boolean)}
          />
          <Label htmlFor="customType">カスタムタイプを使用</Label>
        </div>

        {isCustomType ? (
          <Input
            value={customType}
            onChange={(e) => setCustomType(e.target.value)}
            placeholder="カスタムタイプを入力"
            className="mt-2"
          />
        ) : (
          <select
            value={credentialType}
            onChange={(e) => setCredentialType(e.target.value)}
            className="w-full rounded-md border border-input bg-background px-3 py-2"
          >
            {predefinedTypes.map((type) => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
        )}
      </div>

      {/* エラー注入オプションのタイプ設定 */}
      {Object.entries(errorOptions).map(
        ([key, value]) =>
          value && (
            <div key={key} className="space-y-2">
              <Label htmlFor={`errorType_${key}`}>{`${key}のタイプ名`}</Label>
              <Input
                id={`errorType_${key}`}
                value={errorTypes[key as keyof typeof errorTypes]}
                onChange={(e) =>
                  setErrorTypes((prev) => ({
                    ...prev,
                    [key]: e.target.value,
                  }))
                }
                placeholder="エラータイプ名を入力"
              />
            </div>
          ),
      )}

      <div>
        <Label htmlFor="name">氏名</Label>
        <Input
          id="name"
          value={personalInfo.name}
          onChange={(e) =>
            setPersonalInfo({ ...personalInfo, name: e.target.value })
          }
          required
        />
      </div>
      <div>
        <Label htmlFor="dateOfBirth">生年月日</Label>
        <Input
          id="dateOfBirth"
          type="date"
          value={personalInfo.dateOfBirth}
          onChange={(e) =>
            setPersonalInfo({ ...personalInfo, dateOfBirth: e.target.value })
          }
          required
        />
      </div>
      <div>
        <Label htmlFor="postalCode">郵便番号</Label>
        <div className="flex gap-2 items-center">
          <Input
            id="postalCode"
            value={postalCode}
            onChange={handlePostalCodeChange}
            placeholder="例: 100-0001"
            maxLength={8}
          />
          {isLoadingAddress && <Loader2 className="w-4 h-4 animate-spin" />}
        </div>
      </div>
      <div>
        <Label htmlFor="address">住所</Label>
        <Input
          id="address"
          value={personalInfo.address}
          onChange={(e) =>
            setPersonalInfo({ ...personalInfo, address: e.target.value })
          }
          required
        />
      </div>
      <div>
        <Label>カードの色</Label>
        <div className="grid grid-cols-4 gap-2 mt-2">
          {colorOptions.map((color) => (
            <button
              key={color.label}
              type="button"
              className={`h-10 rounded-md bg-gradient-to-br ${color.bg} ${color.text} 
                ${selectedColor.bg === color.bg ? "ring-2 ring-offset-2 ring-black" : ""}`}
              onClick={() => setSelectedColor(color)}
            >
              {color.label}
            </button>
          ))}
        </div>
      </div>
      <div className="space-y-2">
        <Label>検証用プレゼンテーション形式</Label>
        <RadioGroup
          value={presentationFormat}
          onValueChange={(value: string) => setPresentationFormat(value as "sd-jwt" | "vp")}
          className="flex flex-col space-y-2"
        >
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="sd-jwt" id="sd-jwt" />
            <Label htmlFor="sd-jwt">SD-JWT形式（選択的開示JWT）</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="vp" id="vp" />
            <Label htmlFor="vp">W3C標準 Verifiable Presentation形式</Label>
          </div>
        </RadioGroup>
      </div>
      <div className="border-t pt-4">
        <ErrorInjectionForm onErrorOptionsChange={setErrorOptions} />
      </div>
      <div className="flex justify-end gap-4">
        <Button type="button" variant="outline" onClick={onCancel}>
          キャンセル
        </Button>
        <Button type="submit">発行</Button>
      </div>
    </form>
  );
};

export default VCIssueForm;

================
File: src/components/vc-demo/vc-process-visualization.tsx
================
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Check, FileText, Key, Shield } from "lucide-react";

const ProcessStep = ({
  icon: Icon,
  title,
  description,
  isActive,
  isCompleted,
}) => (
  <div
    className={`flex items-start space-x-4 p-4 rounded-lg transition-all
    ${isActive ? "bg-secondary" : ""} 
    ${isCompleted ? "text-primary" : "text-muted-foreground"}`}
  >
    <div className="shrink-0">
      <div
        className={`p-2 rounded-full ${isCompleted ? "bg-primary text-primary-foreground" : "bg-muted"}`}
      >
        {isCompleted ? (
          <Check className="w-5 h-5" />
        ) : (
          <Icon className="w-5 h-5" />
        )}
      </div>
    </div>
    <div className="flex-1">
      <h3 className="font-medium mb-1">{title}</h3>
      <p className="text-sm">{description}</p>
    </div>
  </div>
);

const VCProcessVisualization = ({ currentStep }) => {
  const steps = [
    {
      icon: Key,
      title: "1. DIDs生成",
      description:
        "発行者と保持者のDecentralized Identifiers (DIDs)を生成します。これはVC発行の基盤となる識別子です。",
    },
    {
      icon: FileText,
      title: "2. 認証リクエスト",
      description:
        "発行者が保持者に対してVC発行の認証リクエストを送信します。このリクエストには発行するVCの種類や目的が含まれます。",
    },
    {
      icon: Shield,
      title: "3. 承認と署名",
      description:
        "保持者が認証リクエストを承認すると、発行者はVCを作成し、電子署名を付与します。",
    },
    {
      icon: Check,
      title: "4. VC発行完了",
      description:
        "署名されたVCが保持者に発行され、保持者のウォレットに保存されます。このVCは第三者への提示に使用できます。",
    },
  ];

  return (
    <Card className="mt-8">
      <CardHeader>
        <CardTitle>Verifiable Credential発行プロセス</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {steps.map((step, index) => (
            <div key={index} className="relative">
              <ProcessStep
                {...step}
                isActive={currentStep === index}
                isCompleted={currentStep > index}
              />
              {index < steps.length - 1 && (
                <div className="absolute left-7 top-14 h-8 w-0.5 bg-muted-foreground/20" />
              )}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default VCProcessVisualization;

================
File: src/components/vc-demo/vc-selective-disclosure.tsx
================
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { VerifiableCredential } from "@/lib/types/vc";
import { createSelectiveDisclosure, createVerifiablePresentation } from "@/lib/vc/utils";
import React, { useState } from "react";

// 複数のクレデンシャルから選択する場合の型
interface SelectiveDisclosureMultipleProps {
  credentials: VerifiableCredential[];
  requiredClaims: string[];
  onVerify: (credential: VerifiableCredential | any) => void;
  isVerifying: boolean;
  credential?: never; // credential は設定しない
  onSubmit?: never; // onSubmit は設定しない
}

// 単一のクレデンシャルを使用する場合の型
interface SelectiveDisclosureSingleProps {
  credential: VerifiableCredential;
  requiredClaims: string[];
  onSubmit: (credential: VerifiableCredential | any) => void;
  credentials?: never; // credentials は設定しない
  onVerify?: never; // onVerify は設定しない
  isVerifying?: never; // isVerifying は設定しない
}

// 共用型
export type SelectiveDisclosureProps =
  | SelectiveDisclosureMultipleProps
  | SelectiveDisclosureSingleProps;

export const SelectiveDisclosure: React.FC<SelectiveDisclosureProps> = (props) => {
  const [selectedClaims, setSelectedClaims] = useState<string[]>(props.requiredClaims);
  const [selectedCredential, setSelectedCredential] = useState<VerifiableCredential | null>(
    'credential' in props ? props.credential : null
  );

  const handleSubmit = async () => {
    try {
      if (!selectedCredential || !selectedCredential.credentialSubject) {
        console.error("クレデンシャルが選択されていません");
        return;
      }

      // 必ず id を含めるようにする
      const finalSelectedClaims = [...selectedClaims];
      if (
        !finalSelectedClaims.includes("id") &&
        selectedCredential.credentialSubject.id
      ) {
        finalSelectedClaims.push("id");
      }

      // プレゼンテーション形式を確認 (デフォルトはSD-JWT)
      const presentationFormat =
        selectedCredential.credentialSubject.presentationFormat || "sd-jwt";

      let disclosureResponse;

      // プレゼンテーション形式に応じて処理を分ける
      if (presentationFormat === "vp") {
        // Verifiable Presentation形式
        disclosureResponse = await createVerifiablePresentation(
          selectedCredential,
          finalSelectedClaims
        );
        console.log("作成したVP:", disclosureResponse);
      } else {
        // SD-JWT形式
        disclosureResponse = await createSelectiveDisclosure(
          selectedCredential,
          finalSelectedClaims
        );
        console.log("作成したSD-JWT:", disclosureResponse);
      }

      if ('onVerify' in props && props.onVerify) {
        props.onVerify(disclosureResponse);
      } else if ('onSubmit' in props && props.onSubmit) {
        props.onSubmit(disclosureResponse);
      }
    } catch (error) {
      console.error("Error creating selective disclosure:", error);
    }
  };

  // 複数クレデンシャルから選択する場合のコンポーネント
  const renderCredentialSelection = () => {
    if (!('credentials' in props) || !props.credentials || props.credentials.length === 0) {
      return (
        <div className="text-center text-red-500">
          利用可能なクレデンシャルがありません
        </div>
      );
    }

    return (
      <div className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle>クレデンシャルを選択</CardTitle>
            <CardDescription>
              提示するクレデンシャルを選択してください
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {props.credentials.map((cred, index) => (
                <div
                  key={cred.id}
                  className={`p-2 border rounded-lg cursor-pointer ${selectedCredential?.id === cred.id
                      ? "border-primary bg-primary/5"
                      : "border-muted"
                    }`}
                  onClick={() => setSelectedCredential(cred)}
                >
                  <div className="font-medium">
                    {cred.type[cred.type.length - 1]}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    発行者: {cred.issuer.name || cred.issuer.id}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div className="space-y-4">
      {'credentials' in props && props.credentials && props.credentials.length > 0
        ? renderCredentialSelection()
        : null}

      {selectedCredential && (
        <Card>
          <CardHeader>
            <CardTitle>開示する情報を選択</CardTitle>
            <CardDescription>
              要求されている情報: {props.requiredClaims.join(", ")}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {Object.keys(selectedCredential.credentialSubject)
                .filter((key) => key !== "id" && key !== "type" && key !== "presentationFormat")
                .map((claim) => (
                  <div key={claim} className="flex items-center space-x-2">
                    <Checkbox
                      id={claim}
                      checked={selectedClaims.includes(claim)}
                      onCheckedChange={() => {
                        setSelectedClaims((prev) =>
                          prev.includes(claim)
                            ? prev.filter((c) => c !== claim)
                            : [...prev, claim],
                        );
                      }}
                    />
                    <Label htmlFor={claim}>
                      {claim === "name"
                        ? "氏名"
                        : claim === "dateOfBirth"
                          ? "生年月日"
                          : claim === "address"
                            ? "住所"
                            : claim}
                      {props.requiredClaims.includes(claim) && " (必須)"}
                    </Label>
                  </div>
                ))}
              <Button
                onClick={handleSubmit}
                className="w-full mt-4"
                disabled={'isVerifying' in props && props.isVerifying || !selectedCredential}
              >
                {'isVerifying' in props && props.isVerifying
                  ? "検証中..."
                  : "選択した情報を開示"
                }
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

================
File: src/components/vc-demo/vc-verifier-request.tsx
================
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import React, { useState } from "react";

interface VerifierRequestProps {
  onRequestSubmit: (requiredClaims: string[]) => void;
}

export const VerifierRequest: React.FC<VerifierRequestProps> = ({
  onRequestSubmit,
}) => {
  const [selectedClaims, setSelectedClaims] = useState<string[]>([]);
  const availableClaims = ["name", "dateOfBirth", "address"];

  const handleToggleClaim = (claim: string) => {
    setSelectedClaims((prev) =>
      prev.includes(claim) ? prev.filter((c) => c !== claim) : [...prev, claim],
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>必要な個人情報の設定</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {availableClaims.map((claim) => (
            <div key={claim} className="flex items-center space-x-2">
              <Checkbox
                id={claim}
                checked={selectedClaims.includes(claim)}
                onCheckedChange={() => handleToggleClaim(claim)}
              />
              <Label htmlFor={claim}>
                {claim === "name"
                  ? "氏名"
                  : claim === "dateOfBirth"
                    ? "生年月日"
                    : "住所"}
              </Label>
            </div>
          ))}
          <Button
            onClick={() => onRequestSubmit(selectedClaims)}
            disabled={selectedClaims.length === 0}
            className="w-full mt-4"
          >
            要求する情報を確定
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

================
File: src/components/vc-demo/vc-verifier.tsx
================
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { VerifiableCredential } from "@/lib/types/vc";
import {
  DetailedVerificationResult,
  detectPresentationFormat,
  verifyCredentialDetailed,
  verifyCredentialOrPresentation,
} from "@/lib/vc/utils";
import { CheckCircle2, XCircle } from "lucide-react";
import React, { useState } from "react";
import { SelectiveDisclosure } from "./vc-selective-disclosure";
import { VerifierRequest } from "./vc-verifier-request";

interface VerifierProps {
  storedCredentials: VerifiableCredential[];
}

const VerifierComponent: React.FC<VerifierProps> = ({ storedCredentials }) => {
  const [requiredClaims, setRequiredClaims] = useState<string[]>([]);
  const [verificationResult, setVerificationResult] =
    useState<DetailedVerificationResult | null>(null);
  const [isVerifying, setIsVerifying] = useState(false);
  const [selectedCredential, setSelectedCredential] =
    useState<VerifiableCredential | null>(null);
  const [isRequestConfirmed, setIsRequestConfirmed] = useState(false);
  const [showCredentialSelection, setShowCredentialSelection] = useState(false);
  const [showRawData, setShowRawData] = useState(false);

  const handleRequestSubmit = (claims: string[]) => {
    setRequiredClaims(claims);
    setIsRequestConfirmed(true);
    setShowCredentialSelection(true);
  };

  const handleVerify = async (disclosureResponse: VerifiableCredential | any) => {
    setIsVerifying(true);
    try {
      console.log("検証開始: disclosureResponse = ", disclosureResponse); // デバッグログ

      // プレゼンテーション形式を検出
      const format = detectPresentationFormat(disclosureResponse);
      console.log("検出された形式:", format);

      let result;
      // VP形式の場合
      if (format === "vp" && Array.isArray(disclosureResponse.verifiableCredential)) {
        // 最初のクレデンシャルを使用
        const vcInPresentation = disclosureResponse.verifiableCredential[0];

        // 詳細な検証を実行
        result = await verifyCredentialDetailed(vcInPresentation);
        // VP自体の検証も行う
        const vpResult = await verifyCredentialOrPresentation(disclosureResponse);

        // VPの検証結果を統合
        result.isValid = result.isValid && vpResult.isValid;
        if (!vpResult.isValid) {
          result.errors.push(...vpResult.errors);
        }

        // VP全体を表示対象に設定
        setSelectedCredential(disclosureResponse);
        // 生データとしてもVP全体を保存
        result.rawCredential = disclosureResponse;
        // VP形式であることを記録
        result.presentationFormat = "vp";
      } else {
        // 詳細な検証を実行 (SD-JWTまたは通常のVC)
        result = await verifyCredentialDetailed(disclosureResponse as any);
        setSelectedCredential(disclosureResponse);
        // 形式を記録
        result.presentationFormat = format;
      }

      console.log("検証結果: ", result); // デバッグログ
      setVerificationResult(result);

      // 要求情報の検証
      const subjectToCheck = format === "vp"
        ? disclosureResponse.verifiableCredential[0].credentialSubject
        : disclosureResponse.credentialSubject;

      const missingClaims = requiredClaims.filter(
        (claim) => !(claim in subjectToCheck),
      );

      if (missingClaims.length > 0) {
        // スキーマ検証の結果を更新
        result.checks.schemaValid = false;
        result.isValid = false;
        result.errors.push(
          `必須フィールドが欠落しています: ${missingClaims.join(", ")}`,
        );
      }
    } catch (error) {
      console.error("検証エラー:", error);
    } finally {
      setIsVerifying(false);
    }
  };

  const getStatusIcon = (status: boolean) => {
    return status ? (
      <CheckCircle2 className="w-5 h-5 text-green-500" />
    ) : (
      <XCircle className="w-5 h-5 text-red-500" />
    );
  };

  const renderVerificationDetails = () => {
    if (!verificationResult) return null;

    // VP内の最初のVCを取得（VP形式の場合）
    const isVPFormat = verificationResult.presentationFormat === "vp";
    const vcObject = isVPFormat && Array.isArray((selectedCredential as any)?.verifiableCredential)
      ? (selectedCredential as any).verifiableCredential[0]
      : selectedCredential;

    const getCheckDetails = (key: string) => {
      switch (key) {
        case "schemaValid":
          return {
            title: "スキーマ検証",
            description: "クレデンシャルが標準的なVC形式に準拠しているか確認",
            reference:
              "@context, type, issuer, credentialSubject などの必須フィールドの存在を確認",
          };
        case "notExpired":
          return {
            title: "有効期限",
            description: "クレデンシャルが有効期限内かどうか確認",
            reference: `発行日: ${vcObject?.validFrom}\n有効期限: ${vcObject?.validUntil || "無期限"}`,
          };
        case "notRevoked":
          return {
            title: "失効状態",
            description: "クレデンシャルが失効していないか確認",
            reference: vcObject?.credentialStatus
              ? `失効確認用ID: ${vcObject.credentialStatus.id}`
              : "失効情報なし",
          };
        case "proofValid":
          return {
            title: "署名検証",
            description: "発行者の電子署名が有効か確認",
            reference: vcObject?.proof
              ? `署名タイプ: ${vcObject.proof.type}\n署名日時: ${vcObject.proof.created}`
              : "署名情報なし",
          };
        case "issuerValid":
          return {
            title: "発行者検証",
            description: "発行者のDIDが有効か確認",
            reference: vcObject?.issuer
              ? `発行者: ${vcObject.issuer.name || 'N/A'}\nDID: ${vcObject.issuer.id || 'N/A'}`
              : "発行者情報なし",
          };
        default:
          return { title: "", description: "", reference: "" };
      }
    };

    // 要求情報の開示状態を確認
    const subjectToCheck = isVPFormat && Array.isArray((selectedCredential as any)?.verifiableCredential)
      ? (selectedCredential as any).verifiableCredential[0].credentialSubject
      : selectedCredential?.credentialSubject;

    const disclosureStatus = requiredClaims.map((claim) => ({
      claim,
      isDisclosed: subjectToCheck ? claim in subjectToCheck : false,
    }));
    const allClaimsDisclosed = disclosureStatus.every(
      (status) => status.isDisclosed,
    );

    return (
      <div className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle>検証結果</CardTitle>
            {(verificationResult as any).presentationFormat && (
              <p className="text-sm text-muted-foreground">
                形式: {(verificationResult as any).presentationFormat === "vp"
                  ? "Verifiable Presentation (W3C標準)"
                  : (verificationResult as any).presentationFormat === "sd-jwt"
                    ? "Selective Disclosure JWT"
                    : "通常のVerifiable Credential"}
              </p>
            )}
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="basic">
              <TabsList className="mb-4">
                <TabsTrigger value="basic">基本情報</TabsTrigger>
                <TabsTrigger value="technical">技術詳細</TabsTrigger>
                <TabsTrigger value="raw">生データ</TabsTrigger>
              </TabsList>

              <TabsContent value="basic">
                <div className="space-y-6">
                  {/* 要求情報の検証結果を最初に表示 */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-medium mb-3">要求情報の開示状態</h4>
                    <div className="space-y-2">
                      {disclosureStatus.map(({ claim, isDisclosed }) => (
                        <div key={claim} className="flex items-center gap-2">
                          {getStatusIcon(isDisclosed)}
                          <span className="text-sm">
                            {claim === "name"
                              ? "氏名"
                              : claim === "dateOfBirth"
                                ? "生年月日"
                                : "住所"}
                            :
                          </span>
                          <span
                            className={`text-sm ${isDisclosed ? "text-green-600" : "text-red-600"}`}
                          >
                            {isDisclosed ? "開示" : "未開示"}
                          </span>
                        </div>
                      ))}
                    </div>
                    {!allClaimsDisclosed && (
                      <div className="mt-3 text-sm text-red-600 bg-red-50 p-2 rounded">
                        一部の要求情報が開示されていません
                      </div>
                    )}
                  </div>

                  {/* 既存の検証項目の表示 */}
                  <div className="space-y-3">
                    <h4 className="font-medium">技術的検証結果</h4>
                    {Object.entries(verificationResult.checks).map(
                      ([key, value]) => {
                        const details = getCheckDetails(key);
                        return (
                          <div
                            key={key}
                            className="flex items-start gap-2 bg-gray-50 p-3 rounded"
                          >
                            {getStatusIcon(value)}
                            <div>
                              <h5 className="font-medium">{details.title}</h5>
                              <p className="text-sm text-gray-600">
                                {details.description}
                              </p>
                              <p className="text-sm text-gray-500 mt-1">
                                {details.reference}
                              </p>
                            </div>
                          </div>
                        );
                      },
                    )}
                  </div>

                  {/* エラーメッセージの表示 */}
                  {verificationResult.errors.length > 0 && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                      <h4 className="font-medium text-red-700 mb-2">
                        検証エラー
                      </h4>
                      <ul className="list-disc list-inside space-y-1">
                        {verificationResult.errors.map((error, index) => (
                          <li key={index} className="text-sm text-red-600">
                            {error}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* 総合判定 */}
                  <div className="border-t pt-4">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">総合判定:</span>
                      {getStatusIcon(verificationResult.isValid)}
                      <span
                        className={
                          verificationResult.isValid
                            ? "text-green-700"
                            : "text-red-700"
                        }
                      >
                        {verificationResult.isValid
                          ? "有効なクレデンシャル"
                          : "無効なクレデンシャル"}
                      </span>
                    </div>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="technical">
                <div className="space-y-4">
                  <Accordion type="single" collapsible className="w-full">
                    {/* 署名検証の詳細 */}
                    <AccordionItem value="proof">
                      <AccordionTrigger>
                        <div className="flex items-center gap-2">
                          <span>署名検証の詳細</span>
                          {getStatusIcon(verificationResult.checks.proofValid)}
                        </div>
                      </AccordionTrigger>
                      <AccordionContent>
                        {verificationResult.technicalDetails?.proof ? (
                          <div className="space-y-2 text-sm">
                            <div className="grid grid-cols-2 gap-2">
                              <div className="font-medium">署名タイプ:</div>
                              <div>
                                {verificationResult.technicalDetails.proof.type}
                              </div>

                              <div className="font-medium">
                                署名アルゴリズム:
                              </div>
                              <div>
                                {
                                  verificationResult.technicalDetails.proof
                                    .cryptosuite
                                }
                              </div>

                              <div className="font-medium">署名日時:</div>
                              <div>
                                {
                                  verificationResult.technicalDetails.proof
                                    .created
                                }
                              </div>

                              <div className="font-medium">検証メソッド:</div>
                              <div>
                                {
                                  verificationResult.technicalDetails.proof
                                    .verificationMethod
                                }
                              </div>
                            </div>

                            {verificationResult.technicalDetails.proof
                              .verificationDetails && (
                                <div className="mt-3 p-3 bg-gray-50 rounded">
                                  <h5 className="font-medium mb-2">検証詳細</h5>
                                  <div className="grid grid-cols-2 gap-2">
                                    <div className="font-medium">署名検証:</div>
                                    <div>
                                      {getStatusIcon(
                                        verificationResult.technicalDetails.proof
                                          .verificationDetails.signatureValid,
                                      )}
                                    </div>

                                    <div className="font-medium">
                                      検証メソッド解決:
                                    </div>
                                    <div>
                                      {getStatusIcon(
                                        verificationResult.technicalDetails.proof
                                          .verificationDetails.methodResolved,
                                      )}
                                    </div>

                                    <div className="font-medium">
                                      プルーフパーパス検証:
                                    </div>
                                    <div>
                                      {getStatusIcon(
                                        verificationResult.technicalDetails.proof
                                          .verificationDetails.proofPurposeValid,
                                      )}
                                    </div>

                                    <div className="font-medium">
                                      暗号スイート対応:
                                    </div>
                                    <div>
                                      {getStatusIcon(
                                        verificationResult.technicalDetails.proof
                                          .verificationDetails
                                          .cryptosuiteSupported,
                                      )}
                                    </div>
                                  </div>

                                  {verificationResult.technicalDetails.proof
                                    .verificationDetails.signatureData && (
                                      <div className="mt-2">
                                        <div className="font-medium">署名値:</div>
                                        <div className="bg-gray-100 p-2 rounded mt-1 break-all text-xs">
                                          {
                                            verificationResult.technicalDetails
                                              .proof.verificationDetails
                                              .signatureData.signatureValue
                                          }
                                        </div>
                                      </div>
                                    )}
                                </div>
                              )}
                          </div>
                        ) : (
                          <div className="text-red-500">
                            署名情報がありません
                          </div>
                        )}
                      </AccordionContent>
                    </AccordionItem>

                    {/* スキーマ検証の詳細 */}
                    <AccordionItem value="schema">
                      <AccordionTrigger>
                        <div className="flex items-center gap-2">
                          <span>スキーマ検証の詳細</span>
                          {getStatusIcon(verificationResult.checks.schemaValid)}
                        </div>
                      </AccordionTrigger>
                      <AccordionContent>
                        {verificationResult.technicalDetails?.schema && (
                          <div className="space-y-3 text-sm">
                            <div>
                              <h5 className="font-medium mb-1">
                                必須フィールド
                              </h5>
                              <div className="bg-gray-50 p-2 rounded">
                                {verificationResult.technicalDetails.schema.requiredFields?.join(
                                  ", ",
                                )}
                              </div>
                            </div>

                            <div>
                              <h5 className="font-medium mb-1">
                                オプションフィールド
                              </h5>
                              <div className="bg-gray-50 p-2 rounded">
                                {verificationResult.technicalDetails.schema.optionalFields?.join(
                                  ", ",
                                )}
                              </div>
                            </div>

                            {verificationResult.technicalDetails.schema
                              .validationErrors && (
                                <div>
                                  <h5 className="font-medium mb-1 text-red-600">
                                    検証エラー
                                  </h5>
                                  <ul className="list-disc list-inside text-red-600 bg-red-50 p-2 rounded">
                                    {verificationResult.technicalDetails.schema.validationErrors.map(
                                      (error, idx) => (
                                        <li key={idx}>{error}</li>
                                      ),
                                    )}
                                  </ul>
                                </div>
                              )}
                          </div>
                        )}
                      </AccordionContent>
                    </AccordionItem>

                    {/* 発行者検証の詳細 */}
                    <AccordionItem value="issuer">
                      <AccordionTrigger>
                        <div className="flex items-center gap-2">
                          <span>発行者検証の詳細</span>
                          {getStatusIcon(verificationResult.checks.issuerValid)}
                        </div>
                      </AccordionTrigger>
                      <AccordionContent>
                        {verificationResult.technicalDetails?.issuer ? (
                          <div className="space-y-2 text-sm">
                            <div className="grid grid-cols-2 gap-2">
                              <div className="font-medium">発行者DID:</div>
                              <div className="break-all">
                                {verificationResult.technicalDetails.issuer.did}
                              </div>
                            </div>

                            {verificationResult.technicalDetails.issuer
                              .didDocument && (
                                <div>
                                  <h5 className="font-medium mb-1">
                                    DIDドキュメント
                                  </h5>
                                  <div className="bg-gray-50 p-2 rounded overflow-auto max-h-40">
                                    <pre className="text-xs">
                                      {JSON.stringify(
                                        verificationResult.technicalDetails.issuer
                                          .didDocument,
                                        null,
                                        2,
                                      )}
                                    </pre>
                                  </div>
                                </div>
                              )}
                          </div>
                        ) : (
                          <div className="text-red-500">
                            発行者情報を取得できませんでした
                          </div>
                        )}
                      </AccordionContent>
                    </AccordionItem>

                    {/* 有効期限検証の詳細 */}
                    <AccordionItem value="expiry">
                      <AccordionTrigger>
                        <div className="flex items-center gap-2">
                          <span>有効期限検証の詳細</span>
                          {getStatusIcon(verificationResult.checks.notExpired)}
                        </div>
                      </AccordionTrigger>
                      <AccordionContent>
                        {verificationResult.technicalDetails?.timing && (
                          <div className="space-y-2 text-sm">
                            <div className="grid grid-cols-2 gap-2">
                              <div className="font-medium">有効開始日:</div>
                              <div>
                                {
                                  verificationResult.technicalDetails.timing
                                    .validFrom
                                }
                              </div>

                              <div className="font-medium">有効期限:</div>
                              <div>
                                {verificationResult.technicalDetails.timing
                                  .validUntil || "無期限"}
                              </div>

                              <div className="font-medium">現在時刻:</div>
                              <div>
                                {
                                  verificationResult.technicalDetails.timing
                                    .currentTime
                                }
                              </div>
                            </div>
                          </div>
                        )}
                      </AccordionContent>
                    </AccordionItem>

                    {/* 失効検証の詳細 */}
                    {verificationResult.technicalDetails?.revocation && (
                      <AccordionItem value="revocation">
                        <AccordionTrigger>
                          <div className="flex items-center gap-2">
                            <span>失効検証の詳細</span>
                            {getStatusIcon(
                              verificationResult.checks.notRevoked,
                            )}
                          </div>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="space-y-2 text-sm">
                            <div className="grid grid-cols-2 gap-2">
                              <div className="font-medium">失効目的:</div>
                              <div>
                                {
                                  verificationResult.technicalDetails.revocation
                                    .status
                                }
                              </div>

                              <div className="font-medium">
                                失効リストクレデンシャル:
                              </div>
                              <div className="break-all">
                                {
                                  verificationResult.technicalDetails.revocation
                                    .statusListCredential
                                }
                              </div>
                            </div>
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    )}
                  </Accordion>
                </div>
              </TabsContent>

              <TabsContent value="raw">
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-medium">クレデンシャル生データ</h4>
                    </div>
                    <div className="bg-gray-100 p-3 rounded overflow-auto max-h-96">
                      <pre className="text-xs">
                        {JSON.stringify(
                          verificationResult.rawCredential,
                          null,
                          2,
                        )}
                      </pre>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div className="space-y-4">
      {!isRequestConfirmed ? (
        <VerifierRequest onRequestSubmit={handleRequestSubmit} />
      ) : (
        <>
          <Card>
            <CardHeader>
              <CardTitle>要求情報</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <p>以下の情報の提示を要求しています：</p>
                <ul className="list-disc list-inside">
                  {requiredClaims.map((claim) => (
                    <li key={claim}>
                      {claim === "name"
                        ? "氏名"
                        : claim === "dateOfBirth"
                          ? "生年月日"
                          : "住所"}
                    </li>
                  ))}
                </ul>
              </div>
            </CardContent>
          </Card>

          {showCredentialSelection && !verificationResult && (
            <SelectiveDisclosure
              credentials={storedCredentials}
              requiredClaims={requiredClaims}
              onVerify={handleVerify}
              isVerifying={isVerifying}
            />
          )}

          {verificationResult && renderVerificationDetails()}
        </>
      )}
    </div>
  );
};

export { VerifierComponent };

================
File: src/components/vc-demo/vc-wallet-view.tsx
================
// src/components/vc-demo/vc-wallet-view.tsx
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { VerifiableCredential } from "@/lib/types/vc";
import { Calendar, FileCheck, Globe, Share2, Shield, Trash2 } from "lucide-react";
import React from "react";
import { SelectiveDisclosure } from "./vc-selective-disclosure";

interface VCWalletViewProps {
  credentials: VerifiableCredential[];
  onDeleteCredential: (credentialId: string) => void;
}

const VCCard = ({
  credential,
  onDelete,
  onSubmit,
}: {
  credential: VerifiableCredential;
  onDelete: () => void;
  onSubmit: (credential: VerifiableCredential) => void;
}) => {
  const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);
  const [showDetailsDialog, setShowDetailsDialog] = React.useState(false);
  const [showDisclosureDialog, setShowDisclosureDialog] = React.useState(false);
  const [requiredClaims, setRequiredClaims] = React.useState<string[]>([]);
  const issueDate = new Date(credential.issuanceDate || credential.validFrom);
  const expiryDate = credential.validUntil
    ? new Date(credential.validUntil)
    : null;

  // デフォルトのスタイルを設定
  const cardStyle = credential.style || {
    backgroundColor: "from-green-500 to-green-600",
    textColor: "text-white",
  };

  // デバッグ用のログ出力を追加
  React.useEffect(() => {
    console.log("Current credential:", credential);
  }, [credential]);

  // プレゼンテーション形式を取得（存在すれば）
  const presentationFormat = credential.credentialSubject?.presentationFormat || "sd-jwt";
  const formatLabel = presentationFormat === "vp"
    ? "Verifiable Presentation"
    : "SD-JWT";

  const renderCardActions = () => (
    <div className="flex items-center gap-2">
      <Button
        variant="ghost"
        size="icon"
        className="hover:bg-green-500 hover:text-white"
        onClick={(e) => {
          e.stopPropagation();
          setShowDisclosureDialog(true);
        }}
      >
        <Share2 className="w-5 h-5" />
      </Button>
      <Button
        variant="ghost"
        size="icon"
        className="hover:bg-red-500 hover:text-white"
        onClick={(e) => {
          e.stopPropagation();
          setShowDeleteDialog(true);
        }}
      >
        <Trash2 className="w-5 h-5" />
      </Button>
    </div>
  );

  return (
    <>
      <Card
        className={`hover:shadow-lg transition-shadow bg-gradient-to-br ${cardStyle.backgroundColor} ${cardStyle.textColor}`}
        onClick={() => setShowDetailsDialog(true)}
        role="button"
        tabIndex={0}
      >
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FileCheck className="w-6 h-6" />
              <CardTitle className="text-lg">
                {credential.type[credential.type.length - 1]}
              </CardTitle>
            </div>
            {renderCardActions()}
          </div>
          <CardDescription className="text-green-100">
            発行者: {credential.issuer.name || credential.issuer.id}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <Calendar className="w-4 h-4" />
              <span>発行日: {issueDate.toLocaleDateString()}</span>
            </div>
            {expiryDate && (
              <div className="flex items-center gap-2 text-sm">
                <Calendar className="w-4 h-4" />
                <span>有効期限: {expiryDate.toLocaleDateString()}</span>
              </div>
            )}
            <div className="flex items-center gap-2 text-sm">
              <Globe className="w-4 h-4" />
              <span>Holder: {credential.credentialSubject.id}</span>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <Shield className="w-4 h-4" />
              <span>形式: {formatLabel}</span>
            </div>
          </div>
        </CardContent>
      </Card>

      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>クレデンシャル詳細</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h4 className="font-semibold mb-2">基本情報</h4>
                <dl className="space-y-2">
                  <div>
                    <dt className="text-sm text-gray-500">氏名</dt>
                    <dd>{credential.credentialSubject.name}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-500">生年月日</dt>
                    <dd>{credential.credentialSubject.dateOfBirth}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-500">住所</dt>
                    <dd>{credential.credentialSubject.address}</dd>
                  </div>
                </dl>
              </div>
              <div>
                <h4 className="font-semibold mb-2">クレデンシャル情報</h4>
                <dl className="space-y-2">
                  <div>
                    <dt className="text-sm text-gray-500">発行日</dt>
                    <dd>{issueDate.toLocaleDateString()}</dd>
                  </div>
                  {expiryDate && (
                    <div>
                      <dt className="text-sm text-gray-500">有効期限</dt>
                      <dd>{expiryDate.toLocaleDateString()}</dd>
                    </div>
                  )}
                  <div>
                    <dt className="text-sm text-gray-500">発行者</dt>
                    <dd>{credential.issuer.name}</dd>
                  </div>
                  <div>
                    <dt className="text-sm text-gray-500">発行者DID</dt>
                    <dd className="break-all text-sm">
                      {credential.issuer.id}
                    </dd>
                  </div>
                </dl>
              </div>
            </div>
            <div>
              <h4 className="font-semibold mb-2">技術情報</h4>
              <div className="bg-gray-100 p-4 rounded-md">
                <Tabs defaultValue="formatted" className="w-full">
                  <TabsList className="mb-2">
                    <TabsTrigger value="formatted">整形表示</TabsTrigger>
                    <TabsTrigger value="raw">生データ</TabsTrigger>
                  </TabsList>
                  <TabsContent
                    value="formatted"
                    className="min-h-[300px] max-h-[500px] overflow-y-auto"
                  >
                    <div className="space-y-2">
                      <div>
                        <span className="text-sm text-gray-500">ID:</span>
                        <p className="text-sm break-all">{credential.id}</p>
                      </div>
                      <div>
                        <span className="text-sm text-gray-500">タイプ:</span>
                        <p className="text-sm">{credential.type.join(", ")}</p>
                      </div>
                      <div>
                        <span className="text-sm text-gray-500">
                          コンテキスト:
                        </span>
                        <p className="text-sm break-all">
                          {credential["@context"].join(", ")}
                        </p>
                      </div>
                      {credential.credentialStatus && (
                        <div>
                          <span className="text-sm text-gray-500">
                            ステータス:
                          </span>
                          <p className="text-sm break-all">
                            {credential.credentialStatus.type}
                          </p>
                        </div>
                      )}
                    </div>
                  </TabsContent>
                  <TabsContent
                    value="raw"
                    className="min-h-[300px] max-h-[500px] overflow-y-auto"
                  >
                    <pre className="text-sm whitespace-pre-wrap break-all">
                      {JSON.stringify(credential, null, 2)}
                    </pre>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>クレデンシャルの削除</DialogTitle>
            <DialogDescription>
              このVerifiable Credentialを削除してもよろしいですか？
              この操作は取り消せません。
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex gap-2 justify-end">
            <Button
              variant="outline"
              onClick={() => setShowDeleteDialog(false)}
            >
              キャンセル
            </Button>
            <Button
              variant="destructive"
              onClick={() => {
                onDelete();
                setShowDeleteDialog(false);
              }}
            >
              削除
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog
        open={showDisclosureDialog}
        onOpenChange={setShowDisclosureDialog}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>選択的開示</DialogTitle>
            <DialogDescription>
              開示する情報を選択してください
            </DialogDescription>
          </DialogHeader>
          {credential && credential.credentialSubject ? (
            <SelectiveDisclosure
              credential={credential}
              requiredClaims={requiredClaims}
              onSubmit={(disclosureResponse) => {
                onSubmit(disclosureResponse);
                setShowDisclosureDialog(false);
              }}
            />
          ) : (
            <div className="text-red-600 p-4">
              クレデンシャルの形式が正しくありません
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};

const VCWalletView = ({
  credentials,
  onDeleteCredential,
}: VCWalletViewProps) => {
  // 型チェックと配列の確認を追加
  const validCredentials = Array.isArray(credentials) ? credentials : [];

  if (validCredentials.length === 0) {
    return (
      <Card>
        <CardContent className="p-6">
          <p className="text-center text-muted-foreground">
            保存されているVCはありません
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="grid gap-4 md:grid-cols-2">
      {validCredentials.map((credential, index) => (
        <VCCard
          key={credential.id || index}
          credential={credential}
          onDelete={() => onDeleteCredential(credential.id)}
          onSubmit={(credential) => {
            // Implement the logic to handle the submission of disclosure response
          }}
        />
      ))}
    </div>
  );
};

export default VCWalletView;

================
File: src/lib/types/vc.ts
================
import { z } from "zod";

// Proof Schema
export const ProofSchema = z.object({
  type: z.string(),
  created: z.string(),
  verificationMethod: z.string(),
  proofPurpose: z.string(),
  // cryptosuite は Data Integrity Proof v2 では必須です
  cryptosuite: z.string(),
  // proofValue は Data Integrity Proof v2 では必須です
  proofValue: z.string(),
  // jws は Data Integrity Proof v2 では非推奨になりました
  jws: z.string().optional(),
  challenge: z.string().optional(),
  domain: z.string().optional(),
});

export type Proof = z.infer<typeof ProofSchema>;

// 以下は既存のコードをそのまま維持
export const CredentialStatusSchema = z.object({
  id: z.string(),
  type: z.literal("StatusList2021Entry"),
  statusPurpose: z.union([z.literal("revocation"), z.literal("suspension")]),
  // Status List 2023 の新しいフィールド
  statusListIndex: z.string(),
  statusListCredential: z.string(),
});

export type CredentialStatus = z.infer<typeof CredentialStatusSchema>;

export const CredentialSchemaSchema = z.object({
  id: z.string(),
  type: z.string(),
});

export type CredentialSchema = z.infer<typeof CredentialSchemaSchema>;

export const EvidenceSchema = z
  .object({
    id: z.string(),
    type: z.array(z.string()),
    verifier: z.string(),
    evidenceDocument: z.string(),
    subjectPresence: z.string(),
    documentPresence: z.string(),
    verificationMethod: z.string(),
  })
  .and(z.record(z.string(), z.any()));

export const RefreshServiceSchema = z.object({
  id: z.string(),
  type: z.string(),
});

export const TermsOfUseSchema = z.object({
  type: z.string(),
  id: z.string(),
});

// Verifiable Credential Schema
export const VerifiableCredentialSchema = z.object({
  "@context": z.array(z.string()),
  id: z.string(),
  type: z.array(z.string()),
  issuer: z.object({
    id: z.string(),
    name: z.string().optional(),
    image: z.string().optional(),
  }),
  issuanceDate: z.string().optional(),
  validFrom: z.string(),
  validUntil: z.string().optional(),
  credentialSubject: z
    .object({
      id: z.string(),
      type: z.string(),
    })
    .catchall(z.any())
    .and(z.record(z.string(), z.any())),
  credentialStatus: CredentialStatusSchema.optional(),
  credentialSchema: CredentialSchemaSchema.optional(),
  refreshService: RefreshServiceSchema.optional(),
  termsOfUse: z.array(TermsOfUseSchema).optional(),
  evidence: z.array(EvidenceSchema).optional(),
  proof: ProofSchema.optional(),
  style: z
    .object({
      backgroundColor: z.string().optional(),
      textColor: z.string().optional(),
    })
    .optional(),
});

export type VerifiableCredential = z.infer<typeof VerifiableCredentialSchema>;

// Authorization Request Schema
export const AuthorizationRequestSchema = z.object({
  type: z.string(),
  credentialType: z.array(z.string()),
  issuer: z.object({
    id: z.string(),
    name: z.string(),
  }),
  purpose: z.string(),
  timestamp: z.string(),
  requestId: z.string(),
  callbackUrl: z.string(),
  challenge: z.string().optional(),
  domain: z.string().optional(),
});

export type AuthorizationRequest = z.infer<typeof AuthorizationRequestSchema>;

// Authorization Response Schema
export const AuthorizationResponseSchema = z.object({
  requestId: z.string(),
  holder: z.string(),
  accepted: z.boolean(),
  timestamp: z.string(),
  proof: ProofSchema.optional(),
});

export type AuthorizationResponse = z.infer<typeof AuthorizationResponseSchema>;

export interface PersonalInfo {
  name: string;
  dateOfBirth: string;
  address: string;
  presentationFormat?: "sd-jwt" | "vp";
}

// 選択的開示のための型定義
export interface DisclosureRequest {
  requiredClaims: string[];
  optionalClaims: string[];
  purpose: string;
}

export interface DisclosureResponse {
  claims: Record<string, any>;
  proof: Proof;
}

export interface ErrorInjectionOptions {
  invalidSignature: boolean;
  expiredCredential: boolean;
  invalidIssuer: boolean;
  missingFields: boolean;
  revokedCredential: boolean;
}

// Verifiable Presentation型の定義
export interface VerifiablePresentation {
  "@context": string[];
  id: string;
  type: string[];
  holder: string;
  verifiableCredential: VerifiableCredential[];
  proof?: any;
}

export interface VerificationResult {
  isValid: boolean;
  checks: {
    schemaValid: boolean;
    notExpired: boolean;
    notRevoked: boolean;
    proofValid: boolean;
    issuerValid: boolean;
  };
  errors: string[];
}

export interface DetailedVerificationResult extends VerificationResult {
  rawCredential: VerifiableCredential;
  technicalDetails: {
    schema: {
      requiredFields: string[];
      optionalFields: string[];
    };
    timing: {
      validFrom: string;
      validUntil?: string;
      currentTime: string;
    };
    issuer?: {
      did: string;
      didDocument: any;
    };
    revocation?: {
      status: string;
      statusListCredential: string;
    };
    proof?: {
      type: string;
      created: string;
      verificationMethod: string;
      proofPurpose: string;
      proofValue: string;
      verificationDetails?: any;
    };
  };
  presentationFormat?: "sd-jwt" | "vp" | "vc";
}

================
File: src/lib/utils/address.ts
================
export async function fetchAddressFromPostalCode(
  postalCode: string,
): Promise<string | null> {
  try {
    // 郵便番号から"-"を削除
    const cleanedPostalCode = postalCode.replace(/-/g, "");

    // 郵便番号検索APIを使用
    const response = await fetch(
      `https://zipcloud.ibsnet.co.jp/api/search?zipcode=${cleanedPostalCode}`,
    );

    const data = await response.json();

    if (data.results && data.results[0]) {
      const result = data.results[0];
      // 都道府県、市区町村、町域を連結
      return `${result.address1}${result.address2}${result.address3}`;
    }

    return null;
  } catch (error) {
    console.error("郵便番号検索エラー:", error);
    return null;
  }
}

================
File: src/lib/vc/crypto-utils.ts
================
// src/lib/vc/crypto-utils.ts
export interface KeyPair {
  publicKey: CryptoKey;
  privateKey: CryptoKey;
}

export async function generateKeyPair(): Promise<KeyPair> {
  // ブラウザのcrypto APIを使用
  const keyPair = await window.crypto.subtle.generateKey(
    {
      name: "ECDSA",
      namedCurve: "P-256",
    },
    true,
    ["sign", "verify"],
  );

  return {
    publicKey: keyPair.publicKey,
    privateKey: keyPair.privateKey,
  };
}

export async function signCredential(
  credential: any,
  privateKey: CryptoKey,
): Promise<string> {
  const encoder = new TextEncoder();
  const data = encoder.encode(JSON.stringify(credential));

  const signature = await window.crypto.subtle.sign(
    {
      name: "ECDSA",
      hash: { name: "SHA-256" },
    },
    privateKey,
    data,
  );

  return btoa(String.fromCharCode(...new Uint8Array(signature)));
}

export async function verifyCredential(
  credential: any,
  signature: string,
  publicKey: CryptoKey,
): Promise<boolean> {
  const encoder = new TextEncoder();
  const data = encoder.encode(JSON.stringify(credential));
  const signatureBytes = Uint8Array.from(atob(signature), (c) =>
    c.charCodeAt(0),
  );

  return await window.crypto.subtle.verify(
    {
      name: "ECDSA",
      hash: { name: "SHA-256" },
    },
    publicKey,
    signatureBytes,
    data,
  );
}

export async function exportPublicKey(key: CryptoKey): Promise<string> {
  const exported = await window.crypto.subtle.exportKey("spki", key);
  return btoa(String.fromCharCode(...new Uint8Array(exported)));
}

export async function importPublicKey(keyData: string): Promise<CryptoKey> {
  const keyBytes = Uint8Array.from(atob(keyData), (c) => c.charCodeAt(0));
  return await window.crypto.subtle.importKey(
    "spki",
    keyBytes,
    {
      name: "ECDSA",
      namedCurve: "P-256",
    },
    true,
    ["verify"],
  );
}

================
File: src/lib/vc/did-utils.ts
================
// src/lib/vc/did-utils.ts
import { exportPublicKey, KeyPair } from "./crypto-utils";

export interface DIDDocument {
  "@context": string[];
  id: string;
  verificationMethod: {
    id: string;
    type: string;
    controller: string;
    publicKeyJwk: string;
  }[];
  authentication: string[];
  assertionMethod: string[];
}

export async function createDIDDocument(
  did: string,
  keyPair: KeyPair,
): Promise<DIDDocument> {
  const publicKeyJwk = await exportPublicKey(keyPair.publicKey);
  const verificationMethodId = `${did}#key-1`;

  return {
    "@context": ["https://www.w3.org/ns/did/v1"],
    id: did,
    verificationMethod: [
      {
        id: verificationMethodId,
        type: "EcdsaSecp256k1VerificationKey2019",
        controller: did,
        publicKeyJwk,
      },
    ],
    authentication: [verificationMethodId],
    assertionMethod: [verificationMethodId],
  };
}

export function validateDID(did: string): boolean {
  const DID_REGEX = /^did:[a-zA-Z0-9]+:[a-zA-Z0-9.\-:]+$/;
  return DID_REGEX.test(did);
}

export function resolveDID(did: string): Promise<DIDDocument | null> {
  // 無効な発行者の場合はnullを返す
  if (did === "did:web:invalid-issuer.example.com") {
    console.log("Invalid issuer DID detected");
    return Promise.resolve(null);
  }

  // In a real implementation, this would resolve the DID through a DID resolver
  // For demo purposes, we'll create a mock document
  return Promise.resolve({
    "@context": ["https://www.w3.org/ns/did/v1"],
    id: did,
    verificationMethod: [
      {
        id: `${did}#key-1`,
        type: "EcdsaSecp256k1VerificationKey2019",
        controller: did,
        publicKeyJwk: "", // This would be the actual public key in a real implementation
      },
    ],
    authentication: [`${did}#key-1`],
    assertionMethod: [`${did}#key-1`],
  });
}

================
File: src/lib/vc/revocation-utils.ts
================
// src/lib/vc/revocation-utils.ts
import { v4 as uuidv4 } from "uuid";

export interface RevocationList {
  "@context": string[];
  id: string;
  type: string[];
  credentialSubject: {
    id: string;
    type: string;
    encodedList: string;
  };
}

export interface RevocationStatus {
  id: string;
  type: string;
  revocationListIndex: string;
  revocationListCredential: string;
}

export class RevocationService {
  private revocationList: Set<string> = new Set();
  private readonly listId: string;

  constructor() {
    this.listId = `urn:uuid:${uuidv4()}`;
  }

  public createRevocationListCredential(): RevocationList {
    return {
      "@context": [
        "https://www.w3.org/ns/credentials/v2",
        "https://w3id.org/vc-revocation-list-2020/v2",
      ],
      id: this.listId,
      type: ["VerifiableCredential", "RevocationList2021Credential"],
      credentialSubject: {
        id: `${this.listId}#list`,
        type: "RevocationList2020",
        encodedList: this.encodeList(),
      },
    };
  }

  public createRevocationStatus(credentialId: string): RevocationStatus {
    const index = this.getNextIndex();
    return {
      id: `${this.listId}#${index}`,
      type: "RevocationList2020Status",
      revocationListIndex: index.toString(),
      revocationListCredential: this.listId,
    };
  }

  public revokeCredential(credentialId: string): void {
    this.revocationList.add(credentialId);
  }

  public isRevoked(credentialId: string): boolean {
    return this.revocationList.has(credentialId);
  }

  private getNextIndex(): number {
    return this.revocationList.size;
  }

  private encodeList(): string {
    // In a real implementation, this would be a bit array encoded in base64
    // For demo purposes, we'll just return a mock encoded string
    return Buffer.from(Array.from(this.revocationList).join(",")).toString(
      "base64",
    );
  }
}

export const revocationService = new RevocationService();

function convertSDJWTtoVC(presentation: string): VerifiableCredential {
  const [jwt, ...disclosures] = presentation.split("~");
  const [headerB64, payloadB64] = jwt.split(".");

  // JWTペイロードをデコード
  const payload = JSON.parse(
    new TextDecoder().decode(base64urlToBuffer(payloadB64)),
  );

  // 開示された情報を解析
  const disclosedClaims: Record<string, any> = {
    id: payload.sub || payload.id,
    type: "PersonalInfo",
  };

  // 開示情報をクレデンシャルに追加
  for (const disclosure of disclosures) {
    const [, claim, value] = JSON.parse(
      new TextDecoder().decode(base64urlToBuffer(disclosure)),
    );
    disclosedClaims[claim] = value;
  }

  return {
    "@context": payload["@context"],
    id: payload.jti || payload.id,
    type: payload.type,
    issuer: payload.issuer,
    validFrom: payload.validFrom,
    validUntil: payload.validUntil,
    credentialSubject: disclosedClaims,
    proof: {
      type: "JsonWebSignature2020",
      created: new Date().toISOString(),
      jws: presentation,
    },
  };
}

================
File: src/lib/vc/sd-jwt.ts
================
import base64url from "base64url";

// SD-JWT用の型定義
export interface SDJWT {
  jwt: string;
  disclosures: string[];
  key_binding?: string;
}

// ブラウザ対応のハッシュ関数
const sha256 = async (data: string): Promise<string> => {
  const encoder = new TextEncoder();
  const hashBuffer = await crypto.subtle.digest(
    "SHA-256",
    encoder.encode(data),
  );
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashBase64 = btoa(String.fromCharCode(...hashArray));
  // base64をbase64urlに変換
  return hashBase64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
};

// ブラウザ対応のランダム値生成
const generateSalt = (): string => {
  const array = new Uint8Array(16);
  crypto.getRandomValues(array);
  return base64url.encode(String.fromCharCode(...array));
};

// 開示可能な要素のハッシュ生成
const createDisclosure = (salt: string, claim: string, value: any): string => {
  return base64url.encode(JSON.stringify([salt, claim, value]));
};

export async function createSDJWTCredential(
  credential: VerifiableCredential,
  selectableClaims: string[],
): Promise<SDJWT> {
  const credentialId = `urn:uuid:${crypto.randomUUID()}`;
  const credentialStatus = {
    id: `https://demo-issuer.example.com/status/${credentialId}`,
    type: "StatusList2021Entry",
    statusPurpose: "revocation",
    statusListIndex: "0",
    statusListCredential: "https://demo-issuer.example.com/status-list/2021",
  };

  // ソルト値の生成
  const salts = selectableClaims.map(() => generateSalt());

  // 開示用の値を生成
  const disclosures = selectableClaims.map((claim, i) =>
    createDisclosure(salts[i], claim, credential.credentialSubject[claim]),
  );

  // ハッシュ値の生成
  const hashedDisclosures = await Promise.all(
    disclosures.map((disclosure) => sha256(disclosure)),
  );

  // JWT用のペイロード作成
  const payload = {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
    ],
    type: ["VerifiableCredential"],
    issuer: credential.issuer,
    validFrom: credential.validFrom,
    validUntil: credential.validUntil,
    nbf: Math.floor(new Date(credential.validFrom).getTime() / 1000),
    exp: credential.validUntil
      ? Math.floor(new Date(credential.validUntil).getTime() / 1000)
      : Math.floor(Date.now() / 1000) + 365 * 24 * 60 * 60,
    sub: credential.credentialSubject.id,
    credentialSubject: {
      id: credential.credentialSubject.id,
    },
    _sd: hashedDisclosures,
    _sd_alg: "sha-256",
  };

  // JWTの署名（実装が必要）
  const jwt = await signJWT(payload, credential.issuer.id);

  return {
    jwt,
    disclosures,
  };
}

export function createSelectiveDisclosure(
  sdJwt: SDJWT,
  selectedClaims: string[],
): string {
  const selectedDisclosures = selectedClaims.map((claim) => {
    const index = sdJwt.disclosures.findIndex((d) => {
      const [, claimName] = JSON.parse(base64url.decode(d));
      return claimName === claim;
    });
    return sdJwt.disclosures[index];
  });

  return `${sdJwt.jwt}~${selectedDisclosures.join("~")}`;
}

// JWT署名用の関数（実装が必要）
async function signJWT(payload: any, issuerId: string): Promise<string> {
  // 仮実装：実際のプロジェクトでは適切な署名アルゴリズムを使用する必要があります
  const header = {
    alg: "ES256",
    typ: "SD-JWT",
  };

  const encodedHeader = base64url.encode(JSON.stringify(header));
  const encodedPayload = base64url.encode(JSON.stringify(payload));

  // 署名部分は実際のプロジェクトで実装する必要があります
  const signature = "dummy_signature";

  return `${encodedHeader}.${encodedPayload}.${signature}`;
}

export interface SDJWTVerificationResult {
  isValid: boolean;
  notExpired: boolean;
  signatureValid: boolean;
  issuerValid: boolean;
  disclosedClaims: string[];
  errors: string[];
}

export async function verifySDJWT(
  credential: VerifiableCredential,
): Promise<SDJWTVerificationResult> {
  const result: SDJWTVerificationResult = {
    isValid: false,
    notExpired: false,
    signatureValid: false,
    issuerValid: false,
    disclosedClaims: [],
    errors: [],
  };

  try {
    if (!credential.proof?.proofValue) {
      result.errors.push("SD-JWT形式の署名が見つかりません");
      return result;
    }

    const [jwt, ...disclosures] = credential.proof.proofValue.split("~");
    const [headerB64, payloadB64, signatureB64] = jwt.split(".");

    // ペイロードのデコード
    const payload = JSON.parse(
      new TextDecoder().decode(base64urlToBuffer(payloadB64)),
    );

    // 有効期限チェック
    const now = Math.floor(Date.now() / 1000);
    result.notExpired =
      (!payload.exp || payload.exp > now) &&
      (!payload.nbf || payload.nbf <= now);

    if (!result.notExpired) {
      result.errors.push("SD-JWTの有効期限が切れています");
    }

    // 開示された情報の検証
    for (const disclosure of disclosures) {
      const [salt, claim, value] = JSON.parse(
        new TextDecoder().decode(base64urlToBuffer(disclosure)),
      );

      // ハッシュ値の検証
      const hash = await sha256(disclosure);
      if (!payload._sd.includes(hash)) {
        result.errors.push(`開示された情報のハッシュ値が不正です: ${claim}`);
        continue;
      }

      result.disclosedClaims.push(claim);
    }

    // 署名検証
    result.signatureValid = await verifyJWTSignature(jwt);
    if (!result.signatureValid) {
      result.errors.push("SD-JWTの署名が無効です");
    }

    // 発行者の検証
    result.issuerValid = payload.issuer && payload.issuer.id;
    if (!result.issuerValid) {
      result.errors.push("発行者情報が不正です");
    }

    // 総合判定
    result.isValid =
      result.signatureValid &&
      result.notExpired &&
      result.issuerValid &&
      result.errors.length === 0;
  } catch (error) {
    result.errors.push(
      `検証中に予期せぬエラーが発生しました: ${error instanceof Error ? error.message : "不明なエラー"}`,
    );
  }

  return result;
}

// Base64URL文字列をバッファに変換
export function base64urlToBuffer(base64url: string): Uint8Array {
  const base64 = base64url.replace(/-/g, "+").replace(/_/g, "/");
  const binStr = atob(base64);
  return Uint8Array.from(binStr, (c) => c.charCodeAt(0));
}

// JWT署名の検証（実装が必要）
async function verifyJWTSignature(jwt: string): Promise<boolean> {
  // 無効な署名の場合はfalseを返す
  if (jwt.includes("invalid_signature_for_testing_purposes")) {
    console.log("Invalid signature detected in SD-JWT verification"); // デバッグログ
    return false;
  }
  // 仮実装：実際のプロジェクトでは適切な署名検証を実装する必要があります
  return true;
}

interface VerifiableCredential {
  "@context": string[];
  id: string;
  type: string[];
  issuer: {
    id: string;
    name?: string;
    image?: string;
  };
  validFrom: string;
  validUntil?: string;
  credentialSubject: {
    id: string;
    type: string;
    [key: string]: any;
  };
  credentialStatus?: {
    id: string;
    type: "StatusList2021Entry";
    statusPurpose: "revocation" | "suspension";
    statusListIndex: string;
    statusListCredential: string;
  };
  proof?: DataIntegrityProof;
}

interface DataIntegrityProof {
  type: string;
  created: string;
  verificationMethod: string;
  cryptosuite: string;
  proofPurpose: string;
  proofValue: string;
}

================
File: src/lib/vc/security-utils.ts
================
import { JWK } from "jose";
import { generateKeyPair } from "./crypto-utils";

export interface SecurityProof {
  type: string;
  created: string;
  verificationMethod: string;
  proofPurpose: string;
  cryptosuite: string;
  proofValue: string;
  jws?: string;
  challenge?: string;
  domain?: string;
}

export interface LinkedDataProof extends SecurityProof {
  nonce?: string;
}

export async function createLinkedDataProof(
  document: any,
  controller: string,
  purpose: string,
  options?: {
    challenge?: string;
    domain?: string;
    nonce?: string;
  },
): Promise<LinkedDataProof> {
  // キーペアの生成
  const keyPair = await generateKeyPair();

  // ドキュメントの正規化
  const normalizedDoc = await normalizeDocument(document);

  // JWKの作成
  const jwk = await exportKeyToJWK(keyPair.privateKey);

  // JWSの作成
  const jws = await createJWS(normalizedDoc, keyPair.privateKey);

  const proof: LinkedDataProof = {
    type: "DataIntegrityProof",
    created: new Date().toISOString(),
    verificationMethod: `${controller}#key-1`,
    proofPurpose: purpose,
    cryptosuite: "ecdsa-2019",
    proofValue: jws,
    ...options,
  };

  return proof;
}

async function normalizeDocument(document: any): Promise<string> {
  const context = {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/suites/jws-2020/v2",
    ],
  };

  const fullDoc = { ...context, ...document };
  return JSON.stringify(fullDoc);
}

async function exportKeyToJWK(key: CryptoKey): Promise<JWK> {
  const exported = await crypto.subtle.exportKey("jwk", key);
  return {
    ...exported,
    kty: exported.kty as string,
    alg: "ES256",
    use: "sig",
  };
}

async function createJWS(payload: any, privateKey: CryptoKey): Promise<string> {
  // ペイロードをJSON文字列に変換
  const payloadString = JSON.stringify(payload);

  // UTF-8バイト配列に変換
  const encoder = new TextEncoder();
  const payloadBytes = encoder.encode(payloadString);

  // Base64エンコード（UTF-8対応）
  const base64Payload = btoa(String.fromCharCode(...payloadBytes));

  // 署名の生成
  const signature = await crypto.subtle.sign(
    {
      name: "ECDSA",
      hash: { name: "SHA-256" },
    },
    privateKey,
    payloadBytes,
  );

  // 署名をBase64エンコード
  const signatureBase64 = btoa(
    String.fromCharCode(...new Uint8Array(signature)),
  );

  // JWSの形式で返す
  return `${base64Payload}.${signatureBase64}`;
}

// 新しい検証結果の型定義
export interface DetailedVerificationResult {
  isValid: boolean;
  details: {
    signatureValid: boolean;
    methodResolved: boolean;
    proofPurposeValid: boolean;
    cryptosuiteSupported: boolean;
    signatureData?: {
      algorithm: string;
      created: string;
      verificationMethod: string;
      signatureValue: string;
    };
  };
}

// 詳細な検証結果を返す新しい関数
export async function verifyLinkedDataProofDetailed(
  document: any,
  proof: LinkedDataProof,
): Promise<DetailedVerificationResult> {
  console.log("検証開始: proof = ", proof); // デバッグログ
  const result: DetailedVerificationResult = {
    isValid: false,
    details: {
      signatureValid: false,
      methodResolved: false,
      proofPurposeValid: false,
      cryptosuiteSupported: false,
    },
  };

  try {
    // 無効な署名の場合は詳細情報付きでfalseを返す
    if (proof.proofValue === "invalid_signature_for_testing_purposes") {
      console.log(
        "Invalid signature detected in verifyLinkedDataProofDetailed",
      ); // デバッグログ
      return {
        isValid: false,
        details: {
          signatureValid: false,
          methodResolved: true,
          proofPurposeValid: true,
          cryptosuiteSupported: true,
          signatureData: {
            algorithm: proof.cryptosuite || "ecdsa-2019",
            created: proof.created,
            verificationMethod: proof.verificationMethod,
            signatureValue: proof.proofValue.substring(0, 20) + "...", // 署名の一部を表示
          },
        },
      };
    }

    // 検証メソッドの解決をシミュレート
    result.details.methodResolved = true;

    // プルーフパーパスの検証
    const validPurposes = ["assertionMethod", "authentication", "keyAgreement"];
    result.details.proofPurposeValid = validPurposes.includes(
      proof.proofPurpose,
    );

    // 暗号スイートのサポート確認
    const supportedSuites = [
      "ecdsa-2019",
      "eddsa-rdfc-2022",
      "ecdsa-sd-2023",
      "bbs-2023",
    ];
    result.details.cryptosuiteSupported = supportedSuites.includes(
      proof.cryptosuite,
    );

    // 署名検証（無効な署名の場合はfalseを返す）
    result.details.signatureValid =
      proof.proofValue !== "invalid_signature_for_testing_purposes";

    // 署名データの詳細情報
    result.details.signatureData = {
      algorithm: proof.cryptosuite,
      created: proof.created,
      verificationMethod: proof.verificationMethod,
      signatureValue:
        proof.proofValue.length > 40
          ? proof.proofValue.substring(0, 20) +
            "..." +
            proof.proofValue.substring(proof.proofValue.length - 20)
          : proof.proofValue,
    };

    // 総合判定
    result.isValid =
      result.details.signatureValid &&
      result.details.methodResolved &&
      result.details.proofPurposeValid &&
      result.details.cryptosuiteSupported;

    return result;
  } catch (error) {
    console.error("Proof verification failed:", error);
    return result;
  }
}

// 元の関数を修正して新しい関数を使用
export async function verifyLinkedDataProof(
  document: any,
  proof: LinkedDataProof,
): Promise<boolean> {
  const detailedResult = await verifyLinkedDataProofDetailed(document, proof);
  return detailedResult.isValid;
}

async function resolvePublicKey(
  verificationMethod: string,
): Promise<CryptoKey> {
  // 実際の実装では、DIDドキュメントを解決して公開鍵を取得
  // このデモ実装では、ダミーの公開鍵を返す
  return crypto.subtle
    .generateKey(
      {
        name: "ECDSA",
        namedCurve: "P-256",
      },
      true,
      ["sign", "verify"],
    )
    .then((keyPair: CryptoKeyPair) => keyPair.publicKey);
}

async function verifySignature(
  payload: string,
  jws: string,
  publicKey: CryptoKey,
): Promise<boolean> {
  try {
    const [headerB64, payloadB64, signatureB64] = jws.split(".");

    // Base64URLデコード
    const signature = Uint8Array.from(
      atob(signatureB64.replace(/-/g, "+").replace(/_/g, "/")),
      (c) => c.charCodeAt(0),
    );

    return await crypto.subtle.verify(
      {
        name: "ECDSA",
        hash: { name: "SHA-256" },
      },
      publicKey,
      signature,
      new TextEncoder().encode(payload),
    );
  } catch (error) {
    console.error("Signature verification failed:", error);
    return false;
  }
}

export async function createDataIntegrityProof(
  document: any,
  invalidSignature: boolean = false,
): Promise<SecurityProof> {
  // キーペアの生成
  const keyPair = await generateKeyPair();

  // ドキュメントの正規化（JSON文字列に変換）
  const normalizedDoc = JSON.stringify(document);

  let proofValue: string;

  if (invalidSignature) {
    // 無効な署名を生成
    proofValue = "invalid_signature_for_testing_purposes";
  } else {
    // 有効な署名を生成
    const signature = await crypto.subtle.sign(
      {
        name: "ECDSA",
        hash: { name: "SHA-256" },
      },
      keyPair.privateKey,
      new TextEncoder().encode(normalizedDoc),
    );

    // Base64エンコード
    proofValue = btoa(String.fromCharCode(...new Uint8Array(signature)));
  }

  return {
    type: "DataIntegrityProof",
    created: new Date().toISOString(),
    verificationMethod: "did:web:demo-issuer.example.com#key-1",
    proofPurpose: "assertionMethod",
    cryptosuite: "ecdsa-2019",
    proofValue: proofValue,
  };
}

================
File: src/lib/vc/storage-utils.ts
================
// src/lib/vc/storage-utils.ts
import { VerifiableCredential } from "../types/vc";

export const saveCredential = async (
  credential: VerifiableCredential,
): Promise<void> => {
  try {
    const response = await fetch("/api/credentials", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(credential),
    });

    if (!response.ok) {
      throw new Error("Failed to save credential");
    }

    // ローカルストレージにも保存（オプション - オフライン対応用）
    const existingCredentials = await getStoredCredentials();
    localStorage.setItem(
      "stored_credentials",
      JSON.stringify([...existingCredentials, credential]),
    );
  } catch (error) {
    console.error("Error saving credential:", error);
    throw error;
  }
};

export const getStoredCredentials = async (): Promise<
  VerifiableCredential[]
> => {
  try {
    const response = await fetch("/api/credentials");
    if (!response.ok) {
      throw new Error("Failed to fetch credentials");
    }
    const data = await response.json();
    const credentials = Array.isArray(data) ? data : [];

    // ローカルストレージも更新（オプション - オフライン対応用）
    localStorage.setItem("stored_credentials", JSON.stringify(credentials));

    return credentials;
  } catch (error) {
    console.error("Error retrieving credentials:", error);
    // APIが失敗した場合はローカルストレージから取得を試みる
    const storedData = localStorage.getItem("stored_credentials");
    return storedData ? JSON.parse(storedData) : [];
  }
};

export const deleteCredential = async (credentialId: string): Promise<void> => {
  try {
    const response = await fetch("/api/credentials", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ id: credentialId }),
    });

    if (!response.ok) {
      throw new Error("Failed to delete credential");
    }

    // ローカルストレージも更新（オプション - オフライン対応用）
    const credentials = await getStoredCredentials();
    const updatedCredentials = credentials.filter(
      (cred) => cred.id !== credentialId,
    );
    localStorage.setItem(
      "stored_credentials",
      JSON.stringify(updatedCredentials),
    );
  } catch (error) {
    console.error("Error deleting credential:", error);
    throw error;
  }
};

================
File: src/lib/vc/types.ts
================
export interface ErrorInjectionOptions {
  invalidSignature: boolean;
  expiredCredential: boolean;
  invalidIssuer: boolean;
  missingFields: boolean;
  revokedCredential: boolean;
}

================
File: src/lib/vc/utils.ts
================
// src/lib/vc/utils.ts
import { v4 as uuidv4 } from "uuid";
import {
  AuthorizationRequest,
  AuthorizationResponse,
  ErrorInjectionOptions,
  PersonalInfo,
  VerifiableCredential,
  VerifiableCredentialSchema,
  VerifiablePresentation,
} from "../types/vc";
import { generateKeyPair } from "./crypto-utils";
import { createDIDDocument, resolveDID, validateDID } from "./did-utils";
import { revocationService } from "./revocation-utils";
import { base64urlToBuffer, createSDJWTCredential, SDJWT } from "./sd-jwt";
import {
  createDataIntegrityProof,
  createLinkedDataProof,
  verifyLinkedDataProof,
  verifyLinkedDataProofDetailed,
} from "./security-utils";

export async function generateAuthorizationRequest(
  credentialType: string[],
  purpose: string,
): Promise<AuthorizationRequest> {
  const keyPair = await generateKeyPair();
  const issuerDid = "did:web:demo-issuer.example.com";
  await createDIDDocument(issuerDid, keyPair);

  const request: AuthorizationRequest = {
    type: "AuthorizationRequest",
    credentialType,
    issuer: {
      id: issuerDid,
      name: "Demo Issuer",
    },
    purpose,
    timestamp: new Date().toISOString(),
    requestId: uuidv4(),
    callbackUrl: "https://demo-issuer.example.com/callback",
    challenge: uuidv4(),
    domain: "demo-issuer.example.com",
  };

  return request;
}

export async function createVerifiableCredential(
  subjectId: string,
  info: PersonalInfo & {
    credentialType?: string;
    style?: {
      backgroundColor: string;
      textColor: string;
    };
    errorTypes?: Record<string, string>;
    presentationFormat?: "sd-jwt" | "vp";
  },
  errorOptions?: ErrorInjectionOptions,
  credentialType: string = "PersonalInfoCredential",
): Promise<VerifiableCredential> {
  const credentialId = `urn:uuid:${uuidv4()}`;
  const issuerDid = errorOptions?.invalidIssuer
    ? "did:web:invalid-issuer.example.com"
    : "did:web:demo-issuer.example.com";

  // エラーオプションに基づいてクレデンシャルタイプを変更
  let finalCredentialType = info.credentialType || credentialType;

  // エラーオプションが有効な場合、対応するエラータイプを使用
  if (errorOptions && info.errorTypes) {
    if (errorOptions.invalidSignature && info.errorTypes.invalidSignature) {
      finalCredentialType = info.errorTypes.invalidSignature;
    } else if (
      errorOptions.expiredCredential &&
      info.errorTypes.expiredCredential
    ) {
      finalCredentialType = info.errorTypes.expiredCredential;
    } else if (errorOptions.invalidIssuer && info.errorTypes.invalidIssuer) {
      finalCredentialType = info.errorTypes.invalidIssuer;
    } else if (errorOptions.missingFields && info.errorTypes.missingFields) {
      finalCredentialType = info.errorTypes.missingFields;
    } else if (
      errorOptions.revokedCredential &&
      info.errorTypes.revokedCredential
    ) {
      finalCredentialType = info.errorTypes.revokedCredential;
    }
  }

  const credential: VerifiableCredential = {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2",
      "https://w3id.org/security/data-integrity/v2",
      "https://w3id.org/status-list/2023/v1",
    ],
    id: credentialId,
    type: ["VerifiableCredential", finalCredentialType],
    issuer: {
      id: issuerDid,
      name: "Demo Issuer Organization",
      image: "https://demo-issuer.example.com/logo.png",
    },
    issuanceDate: new Date().toISOString(),
    validFrom: errorOptions?.expiredCredential
      ? new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString()
      : new Date().toISOString(),
    validUntil: errorOptions?.expiredCredential
      ? new Date(Date.now() - 1).toISOString()
      : new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
    credentialSubject: errorOptions?.missingFields
      ? { id: subjectId, type: "PersonalInfo" }
      : {
          id: subjectId,
          type: "PersonalInfo",
          name: info.name,
          dateOfBirth: info.dateOfBirth,
          address: info.address,
          presentationFormat: info.presentationFormat || "sd-jwt",
        },
  };

  // スタイル情報を追加
  if (info.style) {
    credential.style = {
      backgroundColor: info.style.backgroundColor,
      textColor: info.style.textColor,
    };
  }

  if (!errorOptions?.missingFields) {
    credential.credentialStatus = {
      id: `https://demo-issuer.example.com/status/${credentialId}`,
      type: "StatusList2021Entry",
      statusPurpose: "revocation",
      statusListIndex: errorOptions?.revokedCredential ? "1" : "0",
      statusListCredential: "https://demo-issuer.example.com/status-list/2021",
    };
  }

  const proof = await createDataIntegrityProof(
    credential,
    errorOptions?.invalidSignature,
  );
  credential.proof = proof;

  // 失効オプションが有効な場合、実際にクレデンシャルを失効させる
  if (errorOptions?.revokedCredential) {
    await revokeCredential(credentialId);
    console.log(`Credential ${credentialId} has been revoked`);
  }

  return credential;
}

export interface VerificationResult {
  isValid: boolean;
  checks: {
    schemaValid: boolean;
    notExpired: boolean;
    notRevoked: boolean;
    proofValid: boolean;
    issuerValid: boolean;
  };
  errors: string[];
}

// 詳細な検証結果の型定義を追加
export interface DetailedVerificationResult extends VerificationResult {
  rawCredential?: any; // 生のクレデンシャルデータ
  presentationFormat: "sd-jwt" | "vp" | "vc";
  technicalDetails: {
    proof?: any; // 署名の詳細情報
    schema?: {
      validationErrors?: string[];
      requiredFields?: string[];
      optionalFields?: string[];
    };
    issuer?: {
      did?: string;
      didDocument?: any;
    };
    timing?: {
      validFrom?: string;
      validUntil?: string;
      currentTime?: string;
    };
    revocation?: {
      status?: string;
      statusListCredential?: string;
    };
  };
}

export async function verifyCredential(
  credential: VerifiableCredential,
): Promise<VerificationResult> {
  const result: VerificationResult = {
    isValid: false,
    checks: {
      schemaValid: false,
      notExpired: false,
      notRevoked: false,
      proofValid: false,
      issuerValid: false,
    },
    errors: [],
  };

  try {
    // 1. スキーマ検証
    const validationResult = VerifiableCredentialSchema.safeParse(credential);
    result.checks.schemaValid = validationResult.success;
    if (!validationResult.success) {
      result.errors.push(
        `スキーマ検証エラー: ${validationResult.error.message}`,
      );
    }

    // 2. 有効期限チェック
    const now = new Date();
    const validFrom = new Date(credential.validFrom);
    const validUntil = credential.validUntil
      ? new Date(credential.validUntil)
      : null;

    result.checks.notExpired = true; // デフォルトはtrue
    if (validFrom > now) {
      result.checks.notExpired = false;
      result.errors.push("クレデンシャルの有効期間がまだ始まっていません");
    }
    if (validUntil && validUntil < now) {
      result.checks.notExpired = false;
      result.errors.push("クレデンシャルの有効期限が切れています");
    }

    // 3. 失効状態チェック
    result.checks.notRevoked = await verifyCredentialStatus(credential.id);
    if (!result.checks.notRevoked) {
      result.errors.push("このクレデンシャルは失効しています");
    }

    // 4. 発行者の検証
    try {
      const issuerDID = credential.issuer.id;
      const didDocument = await resolveDID(issuerDID);
      result.checks.issuerValid = !!didDocument && didDocument.id === issuerDID;
      if (!result.checks.issuerValid) {
        result.errors.push("発行者のDIDが無効です");
      }
    } catch (error) {
      result.checks.issuerValid = false;
      result.errors.push(
        `発行者の検証に失敗しました: ${error instanceof Error ? error.message : "不明なエラー"}`,
      );
    }

    // 5. プルーフの検証
    if (credential.proof) {
      // 無効な署名の強制検出
      if (
        credential.proof.proofValue === "invalid_signature_for_testing_purposes"
      ) {
        result.checks.proofValid = false;
        result.errors.push(
          "クレデンシャルの署名が無効です（テスト用無効署名を検出）",
        );
      } else {
        result.checks.proofValid = await verifyLinkedDataProof(
          credential,
          credential.proof,
        );
        if (!result.checks.proofValid) {
          result.errors.push("クレデンシャルの署名が無効です");
        }
      }
    } else {
      result.checks.proofValid = false;
      result.errors.push("クレデンシャルに署名が含まれていません");
    }

    // デバッグ用のログ出力
    console.log("Verification checks:", result.checks);
    console.log("Verification errors:", result.errors);

    // 総合判定
    result.isValid = Object.values(result.checks).every((check) => check);
  } catch (error) {
    result.errors.push(
      `検証中に予期せぬエラーが発生しました: ${error instanceof Error ? error.message : "不明なエラー"}`,
    );
    result.isValid = false;
  }

  return result;
}

export async function generateAuthorizationResponse(
  requestId: string,
  holder: string,
  accepted: boolean,
): Promise<AuthorizationResponse> {
  if (!validateDID(holder)) {
    throw new Error("Invalid DID format for holder");
  }

  const response: AuthorizationResponse = {
    requestId,
    holder,
    accepted,
    timestamp: new Date().toISOString(),
  };

  // 新しいLinkedDataProofを使用して署名を生成
  const proof = await createLinkedDataProof(
    response,
    holder,
    "authentication",
    {
      challenge: uuidv4(),
      domain: "demo-issuer.example.com",
    },
  );

  response.proof = proof;

  return response;
}

export async function revokeCredential(credentialId: string): Promise<void> {
  revocationService.revokeCredential(credentialId);
}

export async function verifyCredentialStatus(
  credentialId: string,
): Promise<boolean> {
  return !revocationService.isRevoked(credentialId);
}

async function exportKeys(publicKey: CryptoKey, privateKey: CryptoKey) {
  try {
    // JWK形式で公開鍵をエクスポート
    const publicJWK = await window.crypto.subtle.exportKey("jwk", publicKey);
    console.log("Public Key (JWK format):", JSON.stringify(publicJWK, null, 2));

    // SPKI形式で公開鍵をエクスポート
    const publicSPKI = await window.crypto.subtle.exportKey("spki", publicKey);
    const publicSPKIBase64 = btoa(
      String.fromCharCode(...new Uint8Array(publicSPKI)),
    );
    console.log("Public Key (SPKI format, base64):", publicSPKIBase64);

    // JWK形式で秘密鍵をエクスポート
    const privateJWK = await window.crypto.subtle.exportKey("jwk", privateKey);
    console.log(
      "Private Key (JWK format):",
      JSON.stringify(privateJWK, null, 2),
    );

    // PKCS#8形式で秘密鍵をエクスポート
    const privatePKCS8 = await window.crypto.subtle.exportKey(
      "pkcs8",
      privateKey,
    );
    const privatePKCS8Base64 = btoa(
      String.fromCharCode(...new Uint8Array(privatePKCS8)),
    );
    console.log("Private Key (PKCS#8 format, base64):", privatePKCS8Base64);
  } catch (error) {
    console.error("Error exporting keys:", error);
  }
}

export async function createSelectiveDisclosure(
  credential: VerifiableCredential,
  selectedClaims: string[],
): Promise<VerifiableCredential> {
  if (!credential || !credential.credentialSubject) {
    throw new Error("Invalid credential: credentialSubject is missing");
  }

  // SD-JWT形式でクレデンシャルを作成
  const sdJwt = await createSDJWTCredential(credential, selectedClaims);

  // 選択的開示用のSD-JWTを作成
  const presentation = await createSDJWTPresentation(sdJwt, selectedClaims);

  // 検証用のVCフォーマットに変換
  return convertSDJWTtoVC(presentation);
}

// SD-JWT形式のプレゼンテーションを作成する関数を追加
async function createSDJWTPresentation(
  sdJwt: SDJWT,
  selectedClaims: string[],
): Promise<string> {
  const { jwt, disclosures } = sdJwt;
  console.log(
    "Creating SD-JWT presentation with JWT:",
    jwt.substring(0, 20) + "...",
  );
  console.log("Selected claims:", selectedClaims);

  // 選択された開示情報のみを含める
  const selectedDisclosures = disclosures.filter((disclosure: string) => {
    const [, claim] = JSON.parse(
      new TextDecoder().decode(base64urlToBuffer(disclosure)),
    );
    // idは常に含める
    return selectedClaims.includes(claim) || claim === "id";
  });

  console.log(
    `Selected ${selectedDisclosures.length} disclosures out of ${disclosures.length}`,
  );

  // JWT と選択された開示情報を ~ で結合
  return [jwt, ...selectedDisclosures].join("~");
}

// VCフォーマットへの変換関数を追加
function convertSDJWTtoVC(presentation: string): VerifiableCredential {
  console.log(
    "Converting SD-JWT to VC, presentation length:",
    presentation.length,
  );

  const [jwt, ...disclosures] = presentation.split("~");
  console.log(`Parsed JWT and ${disclosures.length} disclosures`);

  const [headerB64, payloadB64] = jwt.split(".");
  console.log("JWT header:", headerB64.substring(0, 10) + "...");
  console.log("JWT payload base64:", payloadB64.substring(0, 10) + "...");

  // JWTペイロードをデコード
  const payload = JSON.parse(
    new TextDecoder().decode(base64urlToBuffer(payloadB64)),
  );

  // デバッグ用ログ
  console.log("JWT payload:", payload);
  console.log("nbf:", payload.nbf, "exp:", payload.exp);

  // 開示された情報を解析
  const disclosedClaims = {
    id: payload.sub || payload.id || `did:web:holder-${uuidv4()}`,
    type: "PersonalInfo",
  } as { id: string; type: string } & Record<string, any>;

  // 開示情報をクレデンシャルに追加
  for (const disclosure of disclosures) {
    const [, claim, value] = JSON.parse(
      new TextDecoder().decode(base64urlToBuffer(disclosure)),
    );
    disclosedClaims[claim] = value;
  }

  // 安全に日付を変換する関数
  const safelyConvertToISODate = (
    timestamp: any,
    defaultOffsetDays = 0,
  ): string => {
    console.log(
      `Converting timestamp: ${timestamp}, type: ${typeof timestamp}`,
    );

    if (timestamp === undefined || timestamp === null) {
      console.log("Timestamp is undefined/null, using current date + offset");
      // デフォルト値を現在時刻 + オフセット日数に設定
      const date = new Date();
      date.setDate(date.getDate() + defaultOffsetDays);
      return date.toISOString();
    }

    // 数値に変換を試みる
    const numericTimestamp = Number(timestamp);
    console.log(
      `Converted to numeric: ${numericTimestamp}, isNaN: ${isNaN(numericTimestamp)}`,
    );

    // 無効な数値の場合は現在時刻を使用
    if (isNaN(numericTimestamp)) {
      console.log(
        "Timestamp is not a valid number, using current date + offset",
      );
      const date = new Date();
      date.setDate(date.getDate() + defaultOffsetDays);
      return date.toISOString();
    }

    try {
      // Unix時間をミリ秒に変換して日付オブジェクトを作成
      const date = new Date(numericTimestamp * 1000);
      console.log(
        `Created date: ${date.toISOString()}, year: ${date.getFullYear()}`,
      );

      // 有効な日付かチェック
      if (date.getFullYear() < 1970 || date.getFullYear() > 2100) {
        console.log("Date out of valid range, using fallback");
        const fallbackDate = new Date();
        fallbackDate.setDate(fallbackDate.getDate() + defaultOffsetDays);
        return fallbackDate.toISOString();
      }

      return date.toISOString();
    } catch (error) {
      console.error("日付変換エラー:", error);
      const fallbackDate = new Date();
      fallbackDate.setDate(fallbackDate.getDate() + defaultOffsetDays);
      return fallbackDate.toISOString();
    }
  };

  return {
    "@context": ["https://www.w3.org/ns/credentials/v2"],
    id: `urn:uuid:${uuidv4()}`,
    type: ["VerifiableCredential"],
    issuer: payload.issuer,
    validFrom: safelyConvertToISODate(payload.nbf, 0),
    validUntil: safelyConvertToISODate(payload.exp, 365),
    credentialSubject: {
      ...(payload.credentialSubject || {}),
      ...disclosedClaims,
      id:
        payload.sub ||
        payload.credentialSubject?.id ||
        `did:web:holder-${uuidv4()}`,
    },
    proof: {
      type: "DataIntegrityProof",
      created: new Date().toISOString(),
      proofValue: presentation,
      verificationMethod:
        payload.issuer && payload.issuer.id
          ? `${payload.issuer.id}#key-1`
          : "did:web:demo-issuer.example.com#key-1",
      proofPurpose: "assertionMethod",
      cryptosuite: "ecdsa-2019",
    },
  };
}

export { verifySDJWT } from "./sd-jwt";

// 詳細な検証を行う新しい関数
export async function verifyCredentialDetailed(
  credential: VerifiableCredential | VerifiablePresentation,
): Promise<DetailedVerificationResult> {
  // 形式を判定
  const format = detectPresentationFormat(credential);
  
  // 基本的な検証を実行
  let baseResult: VerificationResult;
  
  if (format === "vp") {
    // VP形式の場合はpresentationを検証
    baseResult = await verifyPresentation(credential as VerifiablePresentation);
  } else {
    // VC形式の場合はcredentialを検証
    baseResult = await verifyCredential(credential as VerifiableCredential);
  }

  // 詳細な検証結果を作成
  const detailedResult: DetailedVerificationResult = {
    ...baseResult,
    rawCredential: { ...credential } as any, // 生のクレデンシャルデータをコピー
    presentationFormat: format,
    technicalDetails: {
      schema: {
        requiredFields: format === "vp" 
          ? ["@context", "id", "type", "holder", "verifiableCredential"] 
          : ["@context", "id", "type", "issuer", "validFrom", "credentialSubject"],
        optionalFields: format === "vp"
          ? ["proof"] 
          : [
              "validUntil",
              "credentialStatus",
              "credentialSchema",
              "refreshService",
              "termsOfUse",
              "evidence",
              "proof",
            ],
      },
      timing: {
        validFrom: format === "vp" 
          ? (credential as VerifiablePresentation).verifiableCredential?.[0]?.validFrom 
          : (credential as VerifiableCredential).validFrom,
        validUntil: format === "vp" 
          ? (credential as VerifiablePresentation).verifiableCredential?.[0]?.validUntil 
          : (credential as VerifiableCredential).validUntil,
        currentTime: new Date().toISOString(),
      },
    },
  };

  // 発行者情報を追加（VP形式の場合は最初のVCの発行者）
  const issuer = format === "vp" 
    ? (credential as VerifiablePresentation).verifiableCredential?.[0]?.issuer 
    : (credential as VerifiableCredential).issuer;
    
  if (issuer && issuer.id) {
    detailedResult.technicalDetails.issuer = {
      did: issuer.id,
      didDocument: await resolveDID(issuer.id).catch(() => null),
    };
  }

  // クレデンシャルステータス情報を追加
  const credStatus = format === "vp" 
    ? (credential as VerifiablePresentation).verifiableCredential?.[0]?.credentialStatus 
    : (credential as VerifiableCredential).credentialStatus;
    
  if (credStatus) {
    detailedResult.technicalDetails.revocation = {
      status: credStatus.statusPurpose,
      statusListCredential: credStatus.statusListCredential,
    };
  }

  // 署名検証の詳細
  if (credential.proof) {
    try {
      // 詳細な署名検証を実行
      const proofResult = await verifyLinkedDataProofDetailed(
        credential,
        credential.proof as any,
      );

      detailedResult.technicalDetails.proof = {
        ...credential.proof,
        verificationDetails: proofResult.details,
      };
    } catch (error) {
      console.error("Detailed proof verification failed:", error);
    }
  }

  return detailedResult;
}

// VP（Verifiable Presentation）作成のための新しい関数
export async function createVerifiablePresentation(
  credential: VerifiableCredential,
  selectedClaims: string[] = []
): Promise<any> {
  // Holderの識別子を取得
  const holderId = credential.credentialSubject.id;
  
  // 選択的開示に対応したCredentialの準備（必要な属性のみ残す）
  let disclosedCredential: VerifiableCredential = JSON.parse(JSON.stringify(credential));
  
  // 選択的開示が指定されている場合
  if (selectedClaims.length > 0 && disclosedCredential.credentialSubject) {
    // 基本属性を保持する新しいオブジェクトを作成
    const filteredSubject: any = {
      id: disclosedCredential.credentialSubject.id,
      type: disclosedCredential.credentialSubject.type,
    };
    
    // 選択された属性を追加
    for (const claim of selectedClaims) {
      if (claim in disclosedCredential.credentialSubject) {
        filteredSubject[claim] = disclosedCredential.credentialSubject[claim];
      }
    }
    
    // 新しい主体で更新
    disclosedCredential.credentialSubject = filteredSubject;
  }
  
  // VPの作成
  const presentation = {
    "@context": [
      "https://www.w3.org/ns/credentials/v2",
      "https://www.w3.org/ns/credentials/examples/v2"
    ],
    "type": ["VerifiablePresentation"],
    "id": `urn:uuid:${uuidv4()}`,
    "holder": holderId,
    "verifiableCredential": [disclosedCredential]
  };
  
  // 署名の作成 (W3C VP用のデータ完全性証明)
  const proof = await createDataIntegrityProof(presentation, false);
  
  // プレゼンテーションにHolderの情報を署名者として付与
  proof.verificationMethod = `${holderId}#key-1`;
  
  // 署名を含むVPを返す
  return {
    ...presentation,
    proof
  };
}

// プレゼンテーション形式を判定する関数
export function detectPresentationFormat(data: any): "sd-jwt" | "vp" | "vc" {
  if (data?.type?.includes("VerifiablePresentation")) {
    return "vp";
  } else if (data?.proof?.proofValue && data.proof.proofValue.includes("~")) {
    return "sd-jwt";
  } else {
    return "vc"; // 通常のVCの場合
  }
}

// Verifiable Presentationを検証する関数
export async function verifyPresentation(presentation: any): Promise<VerificationResult> {
  const result: VerificationResult = {
    isValid: false,
    checks: {
      schemaValid: false,
      notExpired: false,
      notRevoked: false,
      proofValid: false,
      issuerValid: false,
    },
    errors: [],
  };

  try {
    // 1. スキーマ検証
    result.checks.schemaValid = 
      presentation["@context"] && 
      presentation.type && 
      presentation.type.includes("VerifiablePresentation") && 
      presentation.holder && 
      Array.isArray(presentation.verifiableCredential);
    
    if (!result.checks.schemaValid) {
      result.errors.push("Presentationのスキーマが無効です");
    }

    // 2. 署名検証
    if (presentation.proof) {
      result.checks.proofValid = await verifyLinkedDataProof(presentation, presentation.proof);
      if (!result.checks.proofValid) {
        result.errors.push("Presentationの署名が無効です");
      }
    } else {
      result.checks.proofValid = false;
      result.errors.push("Presentationに署名がありません");
    }

    // 3. 含まれるクレデンシャルの検証
    if (Array.isArray(presentation.verifiableCredential) && presentation.verifiableCredential.length > 0) {
      // 各クレデンシャルを検証
      const credentialResults = await Promise.all(
        presentation.verifiableCredential.map(verifyCredential)
      );
      
      // すべてのクレデンシャルが有効かチェック
      const allCredentialsValid = credentialResults.every(r => r.isValid);
      
      if (!allCredentialsValid) {
        result.errors.push("一部のクレデンシャルが無効です");
        
        // 詳細エラーも追加
        credentialResults.forEach((r, i) => {
          if (!r.isValid) {
            result.errors.push(`クレデンシャル ${i+1}: ${r.errors.join(", ")}`);
          }
        });
      }
      
      // クレデンシャルの結果も考慮して最終判定
      result.checks.notExpired = credentialResults.every(r => r.checks.notExpired);
      result.checks.notRevoked = credentialResults.every(r => r.checks.notRevoked);
      result.checks.issuerValid = credentialResults.every(r => r.checks.issuerValid);
    } else {
      result.errors.push("Presentationにクレデンシャルが含まれていません");
    }

    // 総合判定
    result.isValid = Object.values(result.checks).every((check) => check);
  } catch (error) {
    result.errors.push(`検証中に予期せぬエラーが発生しました: ${error instanceof Error ? error.message : "不明なエラー"}`);
    result.isValid = false;
  }

  return result;
}

// 拡張された検証関数 - SD-JWTとVP両方に対応
export async function verifyCredentialOrPresentation(data: any): Promise<VerificationResult> {
  const format = detectPresentationFormat(data);
  
  console.log(`検証形式: ${format}`);
  
  switch (format) {
    case "vp":
      return verifyPresentation(data);
    case "sd-jwt":
      // SD-JWT形式の検証
      return verifyCredential(data);
    case "vc":
      // 通常のVC形式の検証
      return verifyCredential(data);
    default:
      return {
        isValid: false,
        checks: {
          schemaValid: false,
          notExpired: false,
          notRevoked: false,
          proofValid: false,
          issuerValid: false,
        },
        errors: ["不明なフォーマットです"]
      };
  }
}

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

repomix-output.txt

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "vc-demo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "format": "prettier --write ."
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "base64url": "^3.0.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "jose": "^5.9.6",
    "lucide-react": "^0.475.0",
    "next": "15.1.7",
    "qrcode.react": "^4.2.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.0.5",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "prettier": "^3.5.1",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
